// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

package generator

import (
	"os"

	"github.com/iotaledger/wasp/tools/schema/generator/rstemplates"
	"github.com/iotaledger/wasp/tools/schema/model"
)

type RustGenerator struct {
	GenBase
}

var _ IGenerator = new(RustGenerator)

func NewRustGenerator(s *model.Schema) *RustGenerator {
	g := &RustGenerator{}
	g.init(s, rstemplates.TypeDependent, rstemplates.Templates)
	return g
}

func (g *RustGenerator) Cleanup() {
	g.cleanCommonFiles()
	g.cleanSourceFile("lib")

	// now clean up Wasm VM host stub crate
	g.generateCommonFolder("wasm")
	g.cleanFolder(g.folder)
}

func (g *RustGenerator) GenerateImplementation() error {
	err := g.generateImplementation()
	if err != nil {
		return err
	}

	err = g.createSourceFile("lib", true)
	if err != nil {
		return err
	}

	// user may choose to change these after generating, so we never overwrite them
	err = g.GenerateCargoToml("Impl", false)
	if err != nil {
		return err
	}
	return nil
}

func (g *RustGenerator) GenerateInterface() error {
	err := g.generateInterface()
	if err != nil {
		return err
	}

	if g.s.CoreContracts {
		return g.createSourceFile("mod", true)
	}

	err = g.createSourceFile("lib", true, "mod")
	if err != nil {
		return err
	}

	// this is fully generated by schema tool, so we allow overwrite
	err = g.GenerateCargoToml("Lib", true)
	if err != nil {
		return err
	}
	return nil
}

func (g *RustGenerator) GenerateWasmStub() error {
	g.generateCommonFolder("wasm")
	err := os.MkdirAll(g.folder, 0o755)
	if err != nil {
		return err
	}

	// would have preferred to use main.rs, but don't want to generate both a lib.rs
	// AND a main.rs, so we generate a different lib.rs by using a different macro name
	err = g.createSourceFile("lib", !g.s.CoreContracts, "main")
	if err != nil {
		return err
	}

	// this is fully generated by schema tool, so we allow overwrite
	return g.GenerateCargoToml("Wasm", true)
}

func (g *RustGenerator) GenerateCargoToml(cargoMain string, overwrite bool) error {
	const cargoToml = "../Cargo.toml"
	g.keys["cargoMain"] = cargoMain
	// note that either Cargo.toml might have been overridden,
	// so to play it safe do not overwrite that one
	err := g.createFile(g.folder+cargoToml, false, func() {
		g.emit(cargoToml)
	})
	if err != nil {
		return err
	}

	const license = "../LICENSE"
	err = g.createFile(g.folder+license, overwrite, func() {
		g.emit(license)
	})
	if err != nil {
		return err
	}

	const readMe = "../README.md"
	return g.createFile(g.folder+readMe, overwrite, func() {
		g.emit(readMe + " " + cargoMain)
	})
}
