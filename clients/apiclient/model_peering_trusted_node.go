/*
Wasp API

REST API for the Wasp node

API version: 123
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the PeeringTrustedNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeeringTrustedNode{}

// PeeringTrustedNode struct for PeeringTrustedNode
type PeeringTrustedNode struct {
	// NetID of a peer to trust.
	NetId *string `json:"netId,omitempty"`
	// Public key of the NetID.
	PubKey *string `json:"pubKey,omitempty"`
}

// NewPeeringTrustedNode instantiates a new PeeringTrustedNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeeringTrustedNode() *PeeringTrustedNode {
	this := PeeringTrustedNode{}
	return &this
}

// NewPeeringTrustedNodeWithDefaults instantiates a new PeeringTrustedNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeeringTrustedNodeWithDefaults() *PeeringTrustedNode {
	this := PeeringTrustedNode{}
	return &this
}

// GetNetId returns the NetId field value if set, zero value otherwise.
func (o *PeeringTrustedNode) GetNetId() string {
	if o == nil || isNil(o.NetId) {
		var ret string
		return ret
	}
	return *o.NetId
}

// GetNetIdOk returns a tuple with the NetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringTrustedNode) GetNetIdOk() (*string, bool) {
	if o == nil || isNil(o.NetId) {
		return nil, false
	}
	return o.NetId, true
}

// HasNetId returns a boolean if a field has been set.
func (o *PeeringTrustedNode) HasNetId() bool {
	if o != nil && !isNil(o.NetId) {
		return true
	}

	return false
}

// SetNetId gets a reference to the given string and assigns it to the NetId field.
func (o *PeeringTrustedNode) SetNetId(v string) {
	o.NetId = &v
}

// GetPubKey returns the PubKey field value if set, zero value otherwise.
func (o *PeeringTrustedNode) GetPubKey() string {
	if o == nil || isNil(o.PubKey) {
		var ret string
		return ret
	}
	return *o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringTrustedNode) GetPubKeyOk() (*string, bool) {
	if o == nil || isNil(o.PubKey) {
		return nil, false
	}
	return o.PubKey, true
}

// HasPubKey returns a boolean if a field has been set.
func (o *PeeringTrustedNode) HasPubKey() bool {
	if o != nil && !isNil(o.PubKey) {
		return true
	}

	return false
}

// SetPubKey gets a reference to the given string and assigns it to the PubKey field.
func (o *PeeringTrustedNode) SetPubKey(v string) {
	o.PubKey = &v
}

func (o PeeringTrustedNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeeringTrustedNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NetId) {
		toSerialize["netId"] = o.NetId
	}
	if !isNil(o.PubKey) {
		toSerialize["pubKey"] = o.PubKey
	}
	return toSerialize, nil
}

type NullablePeeringTrustedNode struct {
	value *PeeringTrustedNode
	isSet bool
}

func (v NullablePeeringTrustedNode) Get() *PeeringTrustedNode {
	return v.value
}

func (v *NullablePeeringTrustedNode) Set(val *PeeringTrustedNode) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringTrustedNode) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringTrustedNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringTrustedNode(val *PeeringTrustedNode) *NullablePeeringTrustedNode {
	return &NullablePeeringTrustedNode{value: val, isSet: true}
}

func (v NullablePeeringTrustedNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringTrustedNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


