/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-403-g907bc6c54
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the BurnRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BurnRecord{}

// BurnRecord struct for BurnRecord
type BurnRecord struct {
	Code *int32 `json:"Code,omitempty"`
	GasBurned *int64 `json:"GasBurned,omitempty"`
}

// NewBurnRecord instantiates a new BurnRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBurnRecord() *BurnRecord {
	this := BurnRecord{}
	return &this
}

// NewBurnRecordWithDefaults instantiates a new BurnRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBurnRecordWithDefaults() *BurnRecord {
	this := BurnRecord{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *BurnRecord) GetCode() int32 {
	if o == nil || isNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BurnRecord) GetCodeOk() (*int32, bool) {
	if o == nil || isNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *BurnRecord) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *BurnRecord) SetCode(v int32) {
	o.Code = &v
}

// GetGasBurned returns the GasBurned field value if set, zero value otherwise.
func (o *BurnRecord) GetGasBurned() int64 {
	if o == nil || isNil(o.GasBurned) {
		var ret int64
		return ret
	}
	return *o.GasBurned
}

// GetGasBurnedOk returns a tuple with the GasBurned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BurnRecord) GetGasBurnedOk() (*int64, bool) {
	if o == nil || isNil(o.GasBurned) {
		return nil, false
	}
	return o.GasBurned, true
}

// HasGasBurned returns a boolean if a field has been set.
func (o *BurnRecord) HasGasBurned() bool {
	if o != nil && !isNil(o.GasBurned) {
		return true
	}

	return false
}

// SetGasBurned gets a reference to the given int64 and assigns it to the GasBurned field.
func (o *BurnRecord) SetGasBurned(v int64) {
	o.GasBurned = &v
}

func (o BurnRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BurnRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !isNil(o.GasBurned) {
		toSerialize["GasBurned"] = o.GasBurned
	}
	return toSerialize, nil
}

type NullableBurnRecord struct {
	value *BurnRecord
	isSet bool
}

func (v NullableBurnRecord) Get() *BurnRecord {
	return v.value
}

func (v *NullableBurnRecord) Set(val *BurnRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableBurnRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableBurnRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBurnRecord(val *BurnRecord) *NullableBurnRecord {
	return &NullableBurnRecord{value: val, isSet: true}
}

func (v NullableBurnRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBurnRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


