/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-403-g907bc6c54
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the BaseToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseToken{}

// BaseToken struct for BaseToken
type BaseToken struct {
	// The token decimals
	Decimals *int32 `json:"decimals,omitempty"`
	// The base token name
	Name *string `json:"name,omitempty"`
	// The token subunit
	Subunit *string `json:"subunit,omitempty"`
	// The ticker symbol
	TickerSymbol *string `json:"tickerSymbol,omitempty"`
	// The token unit
	Unit *string `json:"unit,omitempty"`
	// Whether or not the token uses a metric prefix
	UseMetricPrefix *bool `json:"useMetricPrefix,omitempty"`
}

// NewBaseToken instantiates a new BaseToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseToken() *BaseToken {
	this := BaseToken{}
	return &this
}

// NewBaseTokenWithDefaults instantiates a new BaseToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTokenWithDefaults() *BaseToken {
	this := BaseToken{}
	return &this
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *BaseToken) GetDecimals() int32 {
	if o == nil || isNil(o.Decimals) {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseToken) GetDecimalsOk() (*int32, bool) {
	if o == nil || isNil(o.Decimals) {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *BaseToken) HasDecimals() bool {
	if o != nil && !isNil(o.Decimals) {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *BaseToken) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BaseToken) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseToken) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BaseToken) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BaseToken) SetName(v string) {
	o.Name = &v
}

// GetSubunit returns the Subunit field value if set, zero value otherwise.
func (o *BaseToken) GetSubunit() string {
	if o == nil || isNil(o.Subunit) {
		var ret string
		return ret
	}
	return *o.Subunit
}

// GetSubunitOk returns a tuple with the Subunit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseToken) GetSubunitOk() (*string, bool) {
	if o == nil || isNil(o.Subunit) {
		return nil, false
	}
	return o.Subunit, true
}

// HasSubunit returns a boolean if a field has been set.
func (o *BaseToken) HasSubunit() bool {
	if o != nil && !isNil(o.Subunit) {
		return true
	}

	return false
}

// SetSubunit gets a reference to the given string and assigns it to the Subunit field.
func (o *BaseToken) SetSubunit(v string) {
	o.Subunit = &v
}

// GetTickerSymbol returns the TickerSymbol field value if set, zero value otherwise.
func (o *BaseToken) GetTickerSymbol() string {
	if o == nil || isNil(o.TickerSymbol) {
		var ret string
		return ret
	}
	return *o.TickerSymbol
}

// GetTickerSymbolOk returns a tuple with the TickerSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseToken) GetTickerSymbolOk() (*string, bool) {
	if o == nil || isNil(o.TickerSymbol) {
		return nil, false
	}
	return o.TickerSymbol, true
}

// HasTickerSymbol returns a boolean if a field has been set.
func (o *BaseToken) HasTickerSymbol() bool {
	if o != nil && !isNil(o.TickerSymbol) {
		return true
	}

	return false
}

// SetTickerSymbol gets a reference to the given string and assigns it to the TickerSymbol field.
func (o *BaseToken) SetTickerSymbol(v string) {
	o.TickerSymbol = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *BaseToken) GetUnit() string {
	if o == nil || isNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseToken) GetUnitOk() (*string, bool) {
	if o == nil || isNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *BaseToken) HasUnit() bool {
	if o != nil && !isNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *BaseToken) SetUnit(v string) {
	o.Unit = &v
}

// GetUseMetricPrefix returns the UseMetricPrefix field value if set, zero value otherwise.
func (o *BaseToken) GetUseMetricPrefix() bool {
	if o == nil || isNil(o.UseMetricPrefix) {
		var ret bool
		return ret
	}
	return *o.UseMetricPrefix
}

// GetUseMetricPrefixOk returns a tuple with the UseMetricPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseToken) GetUseMetricPrefixOk() (*bool, bool) {
	if o == nil || isNil(o.UseMetricPrefix) {
		return nil, false
	}
	return o.UseMetricPrefix, true
}

// HasUseMetricPrefix returns a boolean if a field has been set.
func (o *BaseToken) HasUseMetricPrefix() bool {
	if o != nil && !isNil(o.UseMetricPrefix) {
		return true
	}

	return false
}

// SetUseMetricPrefix gets a reference to the given bool and assigns it to the UseMetricPrefix field.
func (o *BaseToken) SetUseMetricPrefix(v bool) {
	o.UseMetricPrefix = &v
}

func (o BaseToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Decimals) {
		toSerialize["decimals"] = o.Decimals
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Subunit) {
		toSerialize["subunit"] = o.Subunit
	}
	if !isNil(o.TickerSymbol) {
		toSerialize["tickerSymbol"] = o.TickerSymbol
	}
	if !isNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !isNil(o.UseMetricPrefix) {
		toSerialize["useMetricPrefix"] = o.UseMetricPrefix
	}
	return toSerialize, nil
}

type NullableBaseToken struct {
	value *BaseToken
	isSet bool
}

func (v NullableBaseToken) Get() *BaseToken {
	return v.value
}

func (v *NullableBaseToken) Set(val *BaseToken) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseToken) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseToken(val *BaseToken) *NullableBaseToken {
	return &NullableBaseToken{value: val, isSet: true}
}

func (v NullableBaseToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


