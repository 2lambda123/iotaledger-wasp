/*
Wasp API

Testing AdminApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apiclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_apiclient_AdminApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AdminApiService AdmChainChainIDAccessNodePubKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string
		var pubKey string

		httpRes, err := apiClient.AdminApi.AdmChainChainIDAccessNodePubKeyDelete(context.Background(), chainID, pubKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainChainIDAccessNodePubKeyPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string
		var pubKey string

		httpRes, err := apiClient.AdminApi.AdmChainChainIDAccessNodePubKeyPut(context.Background(), chainID, pubKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainChainIDActivatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string

		httpRes, err := apiClient.AdminApi.AdmChainChainIDActivatePost(context.Background(), chainID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainChainIDConsensusMetricsPipeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string

		resp, httpRes, err := apiClient.AdminApi.AdmChainChainIDConsensusMetricsPipeGet(context.Background(), chainID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainChainIDConsensusStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string

		resp, httpRes, err := apiClient.AdminApi.AdmChainChainIDConsensusStatusGet(context.Background(), chainID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainChainIDDeactivatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string

		httpRes, err := apiClient.AdminApi.AdmChainChainIDDeactivatePost(context.Background(), chainID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainChainIDInfoGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string

		httpRes, err := apiClient.AdminApi.AdmChainChainIDInfoGet(context.Background(), chainID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainChainIDNodeconnMetricsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string

		resp, httpRes, err := apiClient.AdminApi.AdmChainChainIDNodeconnMetricsGet(context.Background(), chainID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainNodeconnMetricsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdminApi.AdmChainNodeconnMetricsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainrecordChainIDGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainID string

		resp, httpRes, err := apiClient.AdminApi.AdmChainrecordChainIDGet(context.Background(), chainID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainrecordPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AdminApi.AdmChainrecordPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmChainrecordsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdminApi.AdmChainrecordsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmDksPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdminApi.AdmDksPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmDksSharedAddressGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sharedAddress string

		resp, httpRes, err := apiClient.AdminApi.AdmDksSharedAddressGet(context.Background(), sharedAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmNodeOwnerCertificatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdminApi.AdmNodeOwnerCertificatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmPeeringEstablishedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdminApi.AdmPeeringEstablishedGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmPeeringSelfGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdminApi.AdmPeeringSelfGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmPeeringTrustedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdminApi.AdmPeeringTrustedGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmPeeringTrustedPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AdminApi.AdmPeeringTrustedPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmPeeringTrustedPubKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pubKey string

		httpRes, err := apiClient.AdminApi.AdmPeeringTrustedPubKeyDelete(context.Background(), pubKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmPeeringTrustedPubKeyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pubKey string

		resp, httpRes, err := apiClient.AdminApi.AdmPeeringTrustedPubKeyGet(context.Background(), pubKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmPeeringTrustedPubKeyPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pubKey string

		resp, httpRes, err := apiClient.AdminApi.AdmPeeringTrustedPubKeyPut(context.Background(), pubKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminApiService AdmShutdownGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AdminApi.AdmShutdownGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
