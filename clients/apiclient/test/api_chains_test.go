/*
Wasp API

Testing ChainsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_ChainsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ChainsApiService ActivateChain", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string

        resp, httpRes, err := apiClient.ChainsApi.ActivateChain(context.Background(), chainID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService AddAccessNode", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string
        var publicKey string

        resp, httpRes, err := apiClient.ChainsApi.AddAccessNode(context.Background(), chainID, publicKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService AttachToWebsocket", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string

        resp, httpRes, err := apiClient.ChainsApi.AttachToWebsocket(context.Background(), chainID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService DeactivateChain", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string

        resp, httpRes, err := apiClient.ChainsApi.DeactivateChain(context.Background(), chainID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService GetChainInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string

        resp, httpRes, err := apiClient.ChainsApi.GetChainInfo(context.Background(), chainID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService GetChains", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ChainsApi.GetChains(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService GetCommitteeInfo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string

        resp, httpRes, err := apiClient.ChainsApi.GetCommitteeInfo(context.Background(), chainID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService GetContracts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string

        resp, httpRes, err := apiClient.ChainsApi.GetContracts(context.Background(), chainID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService GetRequestIDFromEVMTransactionID", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string
        var txHash string

        resp, httpRes, err := apiClient.ChainsApi.GetRequestIDFromEVMTransactionID(context.Background(), chainID, txHash).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService GetStateValue", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string
        var stateKey string

        resp, httpRes, err := apiClient.ChainsApi.GetStateValue(context.Background(), chainID, stateKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ChainsApiService RemoveAccessNode", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainID string
        var publicKey string

        resp, httpRes, err := apiClient.ChainsApi.RemoveAccessNode(context.Background(), chainID, publicKey).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
