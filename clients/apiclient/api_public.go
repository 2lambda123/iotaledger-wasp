/*
Wasp API

REST API for the Wasp node

API version: 123
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PublicApiService PublicApi service
type PublicApiService service

type ApiChainChainIDContractContractHnameCallviewFnameGetRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	contractHname string
	fname string
	params *JSONDict
}

// Parameters
func (r ApiChainChainIDContractContractHnameCallviewFnameGetRequest) Params(params JSONDict) ApiChainChainIDContractContractHnameCallviewFnameGetRequest {
	r.params = &params
	return r
}

func (r ApiChainChainIDContractContractHnameCallviewFnameGetRequest) Execute() (*JSONDict, *http.Response, error) {
	return r.ApiService.ChainChainIDContractContractHnameCallviewFnameGetExecute(r)
}

/*
ChainChainIDContractContractHnameCallviewFnameGet Call a view function on a contract by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID
 @param contractHname Contract Hname
 @param fname Function name
 @return ApiChainChainIDContractContractHnameCallviewFnameGetRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDContractContractHnameCallviewFnameGet(ctx context.Context, chainID string, contractHname string, fname string) ApiChainChainIDContractContractHnameCallviewFnameGetRequest {
	return ApiChainChainIDContractContractHnameCallviewFnameGetRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
		contractHname: contractHname,
		fname: fname,
	}
}

// Execute executes the request
//  @return JSONDict
// Deprecated
func (a *PublicApiService) ChainChainIDContractContractHnameCallviewFnameGetExecute(r ApiChainChainIDContractContractHnameCallviewFnameGetRequest) (*JSONDict, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JSONDict
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDContractContractHnameCallviewFnameGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/contract/{contractHname}/callview/{fname}"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contractHname"+"}", url.PathEscape(parameterValueToString(r.contractHname, "contractHname")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fname"+"}", url.PathEscape(parameterValueToString(r.fname, "fname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.params
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChainChainIDContractContractHnameCallviewFnamePostRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	contractHname string
	fname string
	params *JSONDict
}

// Parameters
func (r ApiChainChainIDContractContractHnameCallviewFnamePostRequest) Params(params JSONDict) ApiChainChainIDContractContractHnameCallviewFnamePostRequest {
	r.params = &params
	return r
}

func (r ApiChainChainIDContractContractHnameCallviewFnamePostRequest) Execute() (*JSONDict, *http.Response, error) {
	return r.ApiService.ChainChainIDContractContractHnameCallviewFnamePostExecute(r)
}

/*
ChainChainIDContractContractHnameCallviewFnamePost Call a view function on a contract by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID
 @param contractHname Contract Hname
 @param fname Function name
 @return ApiChainChainIDContractContractHnameCallviewFnamePostRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDContractContractHnameCallviewFnamePost(ctx context.Context, chainID string, contractHname string, fname string) ApiChainChainIDContractContractHnameCallviewFnamePostRequest {
	return ApiChainChainIDContractContractHnameCallviewFnamePostRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
		contractHname: contractHname,
		fname: fname,
	}
}

// Execute executes the request
//  @return JSONDict
// Deprecated
func (a *PublicApiService) ChainChainIDContractContractHnameCallviewFnamePostExecute(r ApiChainChainIDContractContractHnameCallviewFnamePostRequest) (*JSONDict, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JSONDict
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDContractContractHnameCallviewFnamePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/contract/{contractHname}/callview/{fname}"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contractHname"+"}", url.PathEscape(parameterValueToString(r.contractHname, "contractHname")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fname"+"}", url.PathEscape(parameterValueToString(r.fname, "fname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.params
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	contractHname string
	functionHname string
	params *JSONDict
}

// Parameters
func (r ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest) Params(params JSONDict) ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest {
	r.params = &params
	return r
}

func (r ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest) Execute() (*JSONDict, *http.Response, error) {
	return r.ApiService.ChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetExecute(r)
}

/*
ChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGet Call a view function on a contract by Hname

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID
 @param contractHname Contract Hname
 @param functionHname Function Hname
 @return ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGet(ctx context.Context, chainID string, contractHname string, functionHname string) ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest {
	return ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
		contractHname: contractHname,
		functionHname: functionHname,
	}
}

// Execute executes the request
//  @return JSONDict
// Deprecated
func (a *PublicApiService) ChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetExecute(r ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest) (*JSONDict, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JSONDict
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/contract/{contractHname}/callviewbyhname/{functionHname}"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contractHname"+"}", url.PathEscape(parameterValueToString(r.contractHname, "contractHname")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionHname"+"}", url.PathEscape(parameterValueToString(r.functionHname, "functionHname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.params
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	contractHname string
	functionHname string
	params *JSONDict
}

// Parameters
func (r ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest) Params(params JSONDict) ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest {
	r.params = &params
	return r
}

func (r ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest) Execute() (*JSONDict, *http.Response, error) {
	return r.ApiService.ChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostExecute(r)
}

/*
ChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePost Call a view function on a contract by Hname

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID
 @param contractHname Contract Hname
 @param functionHname Function Hname
 @return ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePost(ctx context.Context, chainID string, contractHname string, functionHname string) ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest {
	return ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
		contractHname: contractHname,
		functionHname: functionHname,
	}
}

// Execute executes the request
//  @return JSONDict
// Deprecated
func (a *PublicApiService) ChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostExecute(r ApiChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest) (*JSONDict, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JSONDict
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/contract/{contractHname}/callviewbyhname/{functionHname}"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contractHname"+"}", url.PathEscape(parameterValueToString(r.contractHname, "contractHname")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionHname"+"}", url.PathEscape(parameterValueToString(r.functionHname, "functionHname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.params
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChainChainIDEvmReqidTxHashGetRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	txHash string
}

func (r ApiChainChainIDEvmReqidTxHashGetRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ChainChainIDEvmReqidTxHashGetExecute(r)
}

/*
ChainChainIDEvmReqidTxHashGet Get the ISC request ID for the given Ethereum transaction hash

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID (bech32-encoded)
 @param txHash Transaction hash (hex-encoded)
 @return ApiChainChainIDEvmReqidTxHashGetRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDEvmReqidTxHashGet(ctx context.Context, chainID string, txHash string) ApiChainChainIDEvmReqidTxHashGetRequest {
	return ApiChainChainIDEvmReqidTxHashGetRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
		txHash: txHash,
	}
}

// Execute executes the request
//  @return string
// Deprecated
func (a *PublicApiService) ChainChainIDEvmReqidTxHashGetExecute(r ApiChainChainIDEvmReqidTxHashGetRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDEvmReqidTxHashGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/evm/reqid/{txHash}"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"txHash"+"}", url.PathEscape(parameterValueToString(r.txHash, "txHash")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChainChainIDRequestPostRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	request *OffLedgerRequestBody
}

// Offledger Request encoded in base64. Optionally, the body can be the binary representation of the offledger request, but mime-type must be specified to \&quot;application/octet-stream\&quot;
func (r ApiChainChainIDRequestPostRequest) Request(request OffLedgerRequestBody) ApiChainChainIDRequestPostRequest {
	r.request = &request
	return r
}

func (r ApiChainChainIDRequestPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChainChainIDRequestPostExecute(r)
}

/*
ChainChainIDRequestPost Post an off-ledger request

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID chainID
 @return ApiChainChainIDRequestPostRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDRequestPost(ctx context.Context, chainID string) ApiChainChainIDRequestPostRequest {
	return ApiChainChainIDRequestPostRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
	}
}

// Execute executes the request
// Deprecated
func (a *PublicApiService) ChainChainIDRequestPostExecute(r ApiChainChainIDRequestPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDRequestPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/request"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChainChainIDRequestReqIDReceiptGetRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	reqID string
}

func (r ApiChainChainIDRequestReqIDReceiptGetRequest) Execute() (*RequestReceiptResponse, *http.Response, error) {
	return r.ApiService.ChainChainIDRequestReqIDReceiptGetExecute(r)
}

/*
ChainChainIDRequestReqIDReceiptGet Get the processing status of a given request in the node

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID (bech32)
 @param reqID Request ID
 @return ApiChainChainIDRequestReqIDReceiptGetRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDRequestReqIDReceiptGet(ctx context.Context, chainID string, reqID string) ApiChainChainIDRequestReqIDReceiptGetRequest {
	return ApiChainChainIDRequestReqIDReceiptGetRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
		reqID: reqID,
	}
}

// Execute executes the request
//  @return RequestReceiptResponse
// Deprecated
func (a *PublicApiService) ChainChainIDRequestReqIDReceiptGetExecute(r ApiChainChainIDRequestReqIDReceiptGetRequest) (*RequestReceiptResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequestReceiptResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDRequestReqIDReceiptGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/request/{reqID}/receipt"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reqID"+"}", url.PathEscape(parameterValueToString(r.reqID, "reqID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChainChainIDRequestReqIDWaitGetRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	reqID string
	params *WaitRequestProcessedParams
}

// Optional parameters
func (r ApiChainChainIDRequestReqIDWaitGetRequest) Params(params WaitRequestProcessedParams) ApiChainChainIDRequestReqIDWaitGetRequest {
	r.params = &params
	return r
}

func (r ApiChainChainIDRequestReqIDWaitGetRequest) Execute() (*RequestReceiptResponse, *http.Response, error) {
	return r.ApiService.ChainChainIDRequestReqIDWaitGetExecute(r)
}

/*
ChainChainIDRequestReqIDWaitGet Wait until the given request has been processed by the node

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID (bech32)
 @param reqID Request ID
 @return ApiChainChainIDRequestReqIDWaitGetRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDRequestReqIDWaitGet(ctx context.Context, chainID string, reqID string) ApiChainChainIDRequestReqIDWaitGetRequest {
	return ApiChainChainIDRequestReqIDWaitGetRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
		reqID: reqID,
	}
}

// Execute executes the request
//  @return RequestReceiptResponse
// Deprecated
func (a *PublicApiService) ChainChainIDRequestReqIDWaitGetExecute(r ApiChainChainIDRequestReqIDWaitGetRequest) (*RequestReceiptResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequestReceiptResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDRequestReqIDWaitGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/request/{reqID}/wait"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reqID"+"}", url.PathEscape(parameterValueToString(r.reqID, "reqID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.params
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChainChainIDStateKeyGetRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
	key string
}

func (r ApiChainChainIDStateKeyGetRequest) Execute() ([]int32, *http.Response, error) {
	return r.ApiService.ChainChainIDStateKeyGetExecute(r)
}

/*
ChainChainIDStateKeyGet Fetch the raw value associated with the given key in the chain state

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID
 @param key Key (hex-encoded)
 @return ApiChainChainIDStateKeyGetRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDStateKeyGet(ctx context.Context, chainID string, key string) ApiChainChainIDStateKeyGetRequest {
	return ApiChainChainIDStateKeyGetRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
		key: key,
	}
}

// Execute executes the request
//  @return []int32
// Deprecated
func (a *PublicApiService) ChainChainIDStateKeyGetExecute(r ApiChainChainIDStateKeyGetRequest) ([]int32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDStateKeyGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/state/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", url.PathEscape(parameterValueToString(r.key, "key")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChainChainIDWsGetRequest struct {
	ctx context.Context
	ApiService *PublicApiService
	chainID string
}

func (r ApiChainChainIDWsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ChainChainIDWsGetExecute(r)
}

/*
ChainChainIDWsGet Method for ChainChainIDWsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chainID ChainID (bech32-encoded)
 @return ApiChainChainIDWsGetRequest

Deprecated
*/
func (a *PublicApiService) ChainChainIDWsGet(ctx context.Context, chainID string) ApiChainChainIDWsGetRequest {
	return ApiChainChainIDWsGetRequest{
		ApiService: a,
		ctx: ctx,
		chainID: chainID,
	}
}

// Execute executes the request
// Deprecated
func (a *PublicApiService) ChainChainIDWsGetExecute(r ApiChainChainIDWsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.ChainChainIDWsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chain/{chainID}/ws"
	localVarPath = strings.Replace(localVarPath, "{"+"chainID"+"}", url.PathEscape(parameterValueToString(r.chainID, "chainID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInfoGetRequest struct {
	ctx context.Context
	ApiService *PublicApiService
}

func (r ApiInfoGetRequest) Execute() (*InfoResponse, *http.Response, error) {
	return r.ApiService.InfoGetExecute(r)
}

/*
InfoGet Get information about the node

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInfoGetRequest

Deprecated
*/
func (a *PublicApiService) InfoGet(ctx context.Context) ApiInfoGetRequest {
	return ApiInfoGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InfoResponse
// Deprecated
func (a *PublicApiService) InfoGetExecute(r ApiInfoGetRequest) (*InfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicApiService.InfoGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
