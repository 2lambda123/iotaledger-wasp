/*
Wasp API

REST API for the Wasp node

API version: 123
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the ChainRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChainRecord{}

// ChainRecord struct for ChainRecord
type ChainRecord struct {
	AccessNodes []string `json:"accessNodes,omitempty"`
	// Whether or not the chain is active
	Active *bool `json:"active,omitempty"`
	// ChainID (bech32)
	ChainId *string `json:"chainId,omitempty"`
}

// NewChainRecord instantiates a new ChainRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainRecord() *ChainRecord {
	this := ChainRecord{}
	return &this
}

// NewChainRecordWithDefaults instantiates a new ChainRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainRecordWithDefaults() *ChainRecord {
	this := ChainRecord{}
	return &this
}

// GetAccessNodes returns the AccessNodes field value if set, zero value otherwise.
func (o *ChainRecord) GetAccessNodes() []string {
	if o == nil || isNil(o.AccessNodes) {
		var ret []string
		return ret
	}
	return o.AccessNodes
}

// GetAccessNodesOk returns a tuple with the AccessNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainRecord) GetAccessNodesOk() ([]string, bool) {
	if o == nil || isNil(o.AccessNodes) {
		return nil, false
	}
	return o.AccessNodes, true
}

// HasAccessNodes returns a boolean if a field has been set.
func (o *ChainRecord) HasAccessNodes() bool {
	if o != nil && !isNil(o.AccessNodes) {
		return true
	}

	return false
}

// SetAccessNodes gets a reference to the given []string and assigns it to the AccessNodes field.
func (o *ChainRecord) SetAccessNodes(v []string) {
	o.AccessNodes = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ChainRecord) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainRecord) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ChainRecord) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ChainRecord) SetActive(v bool) {
	o.Active = &v
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *ChainRecord) GetChainId() string {
	if o == nil || isNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainRecord) GetChainIdOk() (*string, bool) {
	if o == nil || isNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *ChainRecord) HasChainId() bool {
	if o != nil && !isNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *ChainRecord) SetChainId(v string) {
	o.ChainId = &v
}

func (o ChainRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChainRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccessNodes) {
		toSerialize["accessNodes"] = o.AccessNodes
	}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.ChainId) {
		toSerialize["chainId"] = o.ChainId
	}
	return toSerialize, nil
}

type NullableChainRecord struct {
	value *ChainRecord
	isSet bool
}

func (v NullableChainRecord) Get() *ChainRecord {
	return v.value
}

func (v *NullableChainRecord) Set(val *ChainRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableChainRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableChainRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainRecord(val *ChainRecord) *NullableChainRecord {
	return &NullableChainRecord{value: val, isSet: true}
}

func (v NullableChainRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


