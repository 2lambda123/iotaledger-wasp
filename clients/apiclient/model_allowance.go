/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-403-g907bc6c54
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the Allowance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Allowance{}

// Allowance struct for Allowance
type Allowance struct {
	FungibleTokens FungibleTokens `json:"fungibleTokens"`
	Nfts []string `json:"nfts"`
}

// NewAllowance instantiates a new Allowance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowance(fungibleTokens FungibleTokens, nfts []string) *Allowance {
	this := Allowance{}
	this.FungibleTokens = fungibleTokens
	this.Nfts = nfts
	return &this
}

// NewAllowanceWithDefaults instantiates a new Allowance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowanceWithDefaults() *Allowance {
	this := Allowance{}
	return &this
}

// GetFungibleTokens returns the FungibleTokens field value
func (o *Allowance) GetFungibleTokens() FungibleTokens {
	if o == nil {
		var ret FungibleTokens
		return ret
	}

	return o.FungibleTokens
}

// GetFungibleTokensOk returns a tuple with the FungibleTokens field value
// and a boolean to check if the value has been set.
func (o *Allowance) GetFungibleTokensOk() (*FungibleTokens, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FungibleTokens, true
}

// SetFungibleTokens sets field value
func (o *Allowance) SetFungibleTokens(v FungibleTokens) {
	o.FungibleTokens = v
}

// GetNfts returns the Nfts field value
func (o *Allowance) GetNfts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Nfts
}

// GetNftsOk returns a tuple with the Nfts field value
// and a boolean to check if the value has been set.
func (o *Allowance) GetNftsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nfts, true
}

// SetNfts sets field value
func (o *Allowance) SetNfts(v []string) {
	o.Nfts = v
}

func (o Allowance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Allowance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fungibleTokens"] = o.FungibleTokens
	toSerialize["nfts"] = o.Nfts
	return toSerialize, nil
}

type NullableAllowance struct {
	value *Allowance
	isSet bool
}

func (v NullableAllowance) Get() *Allowance {
	return v.value
}

func (v *NullableAllowance) Set(val *Allowance) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowance) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowance(val *Allowance) *NullableAllowance {
	return &NullableAllowance{value: val, isSet: true}
}

func (v NullableAllowance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


