/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the Storage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Storage{}

// Storage struct for Storage
type Storage struct {
	// The virtual byte cost
	VByteCost uint32 `json:"vByteCost"`
	// The virtual byte factor for data fields
	VByteFactorData int32 `json:"vByteFactorData"`
	// The virtual byte factor for key/lookup generating fields
	VByteFactorKey int32 `json:"vByteFactorKey"`
}

// NewRentStructure instantiates a new Storage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRentStructure(vByteCost uint32, vByteFactorData int32, vByteFactorKey int32) *Storage {
	this := Storage{}
	this.VByteCost = vByteCost
	this.VByteFactorData = vByteFactorData
	this.VByteFactorKey = vByteFactorKey
	return &this
}

// NewRentStructureWithDefaults instantiates a new Storage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRentStructureWithDefaults() *Storage {
	this := Storage{}
	return &this
}

// GetVByteCost returns the VByteCost field value
func (o *Storage) GetVByteCost() uint32 {
	if o == nil {
		var ret uint32
		return ret
	}

	return o.VByteCost
}

// GetVByteCostOk returns a tuple with the VByteCost field value
// and a boolean to check if the value has been set.
func (o *Storage) GetVByteCostOk() (*uint32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VByteCost, true
}

// SetVByteCost sets field value
func (o *Storage) SetVByteCost(v uint32) {
	o.VByteCost = v
}

// GetVByteFactorData returns the VByteFactorData field value
func (o *Storage) GetVByteFactorData() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VByteFactorData
}

// GetVByteFactorDataOk returns a tuple with the VByteFactorData field value
// and a boolean to check if the value has been set.
func (o *Storage) GetVByteFactorDataOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VByteFactorData, true
}

// SetVByteFactorData sets field value
func (o *Storage) SetVByteFactorData(v int32) {
	o.VByteFactorData = v
}

// GetVByteFactorKey returns the VByteFactorKey field value
func (o *Storage) GetVByteFactorKey() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VByteFactorKey
}

// GetVByteFactorKeyOk returns a tuple with the VByteFactorKey field value
// and a boolean to check if the value has been set.
func (o *Storage) GetVByteFactorKeyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VByteFactorKey, true
}

// SetVByteFactorKey sets field value
func (o *Storage) SetVByteFactorKey(v int32) {
	o.VByteFactorKey = v
}

func (o Storage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Storage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vByteCost"] = o.VByteCost
	toSerialize["vByteFactorData"] = o.VByteFactorData
	toSerialize["vByteFactorKey"] = o.VByteFactorKey
	return toSerialize, nil
}

type NullableRentStructure struct {
	value *Storage
	isSet bool
}

func (v NullableRentStructure) Get() *Storage {
	return v.value
}

func (v *NullableRentStructure) Set(val *Storage) {
	v.value = val
	v.isSet = true
}

func (v NullableRentStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableRentStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRentStructure(val *Storage) *NullableRentStructure {
	return &NullableRentStructure{value: val, isSet: true}
}

func (v NullableRentStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRentStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


