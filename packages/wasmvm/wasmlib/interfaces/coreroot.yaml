name: CoreRoot
description: Root Contract
structs: {}
typedefs: {}
state: {}
funcs:

  # Deploys a non-EVM smart contract on the chain if the caller has deploy permission.
  deployContract:
    # TODO variable init params for deployed contract
    params:
      programHash=ph: Hash # hash of blob that has been previously stored in blob contract
      # The name of the contract to be deployed, used to calculate the contract's hname.
      # The hname must be unique among all contract names in the chain.
      name=nm: String
      description=ds: String? # Description of the contract to be deployed. Default 'N/A'

  # Grants deploy permission to an agent.
  grantDeployPermission:
    access: chain # only chain owner can invoke this function
    params:
      deployer=dp: AgentID # agent to grant deploy permission to

  # Revokes deploy permission for an agent.
  revokeDeployPermission:
    access: chain # only chain owner can invoke this function
    params:
      deployer=dp: AgentID # agent to revoke deploy permission for

  # Enable or disable deploy permission check
  requireDeployPermissions:
    access: chain # only chain owner can invoke this function
    params:
      deployPermissionsEnabled=de: Bool # turns permission check on or off

views:

  # Returns the record for a given smart contract
  findContract:
    params:
      hname=hn: Hname # The smart contractâ€™s Hname
    results:
      contractFound=cf: Bool # whether or not the contract exists.
      contractRecData=dt: Bytes? # encoded contract record (if exists)

  # Returns the list of all smart contracts deployed on the chain and their records.
  getContractRecords:
    results:
      contractRegistry=r: map[Hname]Bytes # contract records by Hname
