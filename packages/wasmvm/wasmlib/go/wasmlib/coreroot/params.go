// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

package coreroot

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

type ImmutableDeployContractParams struct {
	Proxy wasmtypes.Proxy
}

func NewImmutableDeployContractParams() ImmutableDeployContractParams {
	return ImmutableDeployContractParams{Proxy: wasmlib.NewParamsProxy()}
}

// default 'N/A'
func (s ImmutableDeployContractParams) Description() wasmtypes.ScImmutableString {
	return wasmtypes.NewScImmutableString(s.Proxy.Root(ParamDescription))
}

func (s ImmutableDeployContractParams) Name() wasmtypes.ScImmutableString {
	return wasmtypes.NewScImmutableString(s.Proxy.Root(ParamName))
}

// TODO variable init params for deployed contract
func (s ImmutableDeployContractParams) ProgramHash() wasmtypes.ScImmutableHash {
	return wasmtypes.NewScImmutableHash(s.Proxy.Root(ParamProgramHash))
}

type MutableDeployContractParams struct {
	Proxy wasmtypes.Proxy
}

// default 'N/A'
func (s MutableDeployContractParams) Description() wasmtypes.ScMutableString {
	return wasmtypes.NewScMutableString(s.Proxy.Root(ParamDescription))
}

func (s MutableDeployContractParams) Name() wasmtypes.ScMutableString {
	return wasmtypes.NewScMutableString(s.Proxy.Root(ParamName))
}

// TODO variable init params for deployed contract
func (s MutableDeployContractParams) ProgramHash() wasmtypes.ScMutableHash {
	return wasmtypes.NewScMutableHash(s.Proxy.Root(ParamProgramHash))
}

type ImmutableGrantDeployPermissionParams struct {
	Proxy wasmtypes.Proxy
}

func NewImmutableGrantDeployPermissionParams() ImmutableGrantDeployPermissionParams {
	return ImmutableGrantDeployPermissionParams{Proxy: wasmlib.NewParamsProxy()}
}

func (s ImmutableGrantDeployPermissionParams) Deployer() wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(s.Proxy.Root(ParamDeployer))
}

type MutableGrantDeployPermissionParams struct {
	Proxy wasmtypes.Proxy
}

func (s MutableGrantDeployPermissionParams) Deployer() wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(s.Proxy.Root(ParamDeployer))
}

type ImmutableRequireDeployPermissionsParams struct {
	Proxy wasmtypes.Proxy
}

func NewImmutableRequireDeployPermissionsParams() ImmutableRequireDeployPermissionsParams {
	return ImmutableRequireDeployPermissionsParams{Proxy: wasmlib.NewParamsProxy()}
}

func (s ImmutableRequireDeployPermissionsParams) DeployPermissionsEnabled() wasmtypes.ScImmutableBool {
	return wasmtypes.NewScImmutableBool(s.Proxy.Root(ParamDeployPermissionsEnabled))
}

type MutableRequireDeployPermissionsParams struct {
	Proxy wasmtypes.Proxy
}

func (s MutableRequireDeployPermissionsParams) DeployPermissionsEnabled() wasmtypes.ScMutableBool {
	return wasmtypes.NewScMutableBool(s.Proxy.Root(ParamDeployPermissionsEnabled))
}

type ImmutableRevokeDeployPermissionParams struct {
	Proxy wasmtypes.Proxy
}

func NewImmutableRevokeDeployPermissionParams() ImmutableRevokeDeployPermissionParams {
	return ImmutableRevokeDeployPermissionParams{Proxy: wasmlib.NewParamsProxy()}
}

func (s ImmutableRevokeDeployPermissionParams) Deployer() wasmtypes.ScImmutableAgentID {
	return wasmtypes.NewScImmutableAgentID(s.Proxy.Root(ParamDeployer))
}

type MutableRevokeDeployPermissionParams struct {
	Proxy wasmtypes.Proxy
}

func (s MutableRevokeDeployPermissionParams) Deployer() wasmtypes.ScMutableAgentID {
	return wasmtypes.NewScMutableAgentID(s.Proxy.Root(ParamDeployer))
}

type ImmutableFindContractParams struct {
	Proxy wasmtypes.Proxy
}

func NewImmutableFindContractParams() ImmutableFindContractParams {
	return ImmutableFindContractParams{Proxy: wasmlib.NewParamsProxy()}
}

func (s ImmutableFindContractParams) Hname() wasmtypes.ScImmutableHname {
	return wasmtypes.NewScImmutableHname(s.Proxy.Root(ParamHname))
}

type MutableFindContractParams struct {
	Proxy wasmtypes.Proxy
}

func (s MutableFindContractParams) Hname() wasmtypes.ScMutableHname {
	return wasmtypes.NewScMutableHname(s.Proxy.Root(ParamHname))
}
