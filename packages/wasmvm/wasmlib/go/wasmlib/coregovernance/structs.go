// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

package coregovernance

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"

type ChainMetadata struct {
	Description     string
	EvmJsonRPCURL   string
	EvmWebSocketURL string
	Name            string
	Website         string
}

func NewChainMetadataFromBytes(buf []byte) *ChainMetadata {
	dec := wasmtypes.NewWasmDecoder(buf)
	data := &ChainMetadata{}
	data.Description     = wasmtypes.StringDecode(dec)
	data.EvmJsonRPCURL   = wasmtypes.StringDecode(dec)
	data.EvmWebSocketURL = wasmtypes.StringDecode(dec)
	data.Name            = wasmtypes.StringDecode(dec)
	data.Website         = wasmtypes.StringDecode(dec)
	dec.Close()
	return data
}

func (o *ChainMetadata) Bytes() []byte {
	enc := wasmtypes.NewWasmEncoder()
	wasmtypes.StringEncode(enc, o.Description)
	wasmtypes.StringEncode(enc, o.EvmJsonRPCURL)
	wasmtypes.StringEncode(enc, o.EvmWebSocketURL)
	wasmtypes.StringEncode(enc, o.Name)
	wasmtypes.StringEncode(enc, o.Website)
	return enc.Buf()
}

type ImmutableChainMetadata struct {
	Proxy wasmtypes.Proxy
}

func (o ImmutableChainMetadata) Exists() bool {
	return o.Proxy.Exists()
}

func (o ImmutableChainMetadata) Value() *ChainMetadata {
	return NewChainMetadataFromBytes(o.Proxy.Get())
}

type MutableChainMetadata struct {
	Proxy wasmtypes.Proxy
}

func (o MutableChainMetadata) Delete() {
	o.Proxy.Delete()
}

func (o MutableChainMetadata) Exists() bool {
	return o.Proxy.Exists()
}

func (o MutableChainMetadata) SetValue(value *ChainMetadata) {
	o.Proxy.Set(value.Bytes())
}

func (o MutableChainMetadata) Value() *ChainMetadata {
	return NewChainMetadataFromBytes(o.Proxy.Get())
}
