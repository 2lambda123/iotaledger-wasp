// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

package coregovernance

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var coreGovernanceHandlers = map[string]func(*CoreGovernanceEventHandlers, *wasmtypes.WasmDecoder){
	"coregovernance.rotate": func(evt *CoreGovernanceEventHandlers, dec *wasmtypes.WasmDecoder) { evt.onCoreGovernanceRotateThunk(dec) },
}

type CoreGovernanceEventHandlers struct {
	myID uint32
	rotate func(e *EventRotate)
}

var _ wasmlib.IEventHandlers = new(CoreGovernanceEventHandlers)

func NewCoreGovernanceEventHandlers() *CoreGovernanceEventHandlers {
	return &CoreGovernanceEventHandlers{ myID: wasmlib.EventHandlersGenerateID() }
}

func (h *CoreGovernanceEventHandlers) CallHandler(topic string, dec *wasmtypes.WasmDecoder) {
	handler := coreGovernanceHandlers[topic]
	if handler != nil {
		handler(h, dec)
	}
}

func (h *CoreGovernanceEventHandlers) ID() uint32 {
	return h.myID
}

func (h *CoreGovernanceEventHandlers) OnCoreGovernanceRotate(handler func(e *EventRotate)) {
	h.rotate = handler
}

type EventRotate struct {
	Timestamp uint64
	NewAddr wasmtypes.ScAddress
	OldAddr wasmtypes.ScAddress
}

func (h *CoreGovernanceEventHandlers) onCoreGovernanceRotateThunk(dec *wasmtypes.WasmDecoder) {
	if h.rotate == nil {
		return
	}
	e := &EventRotate{}
	e.Timestamp = wasmtypes.Uint64Decode(dec)
	e.NewAddr = wasmtypes.AddressDecode(dec)
	e.OldAddr = wasmtypes.AddressDecode(dec)
	dec.Close()
	h.rotate(e)
}
