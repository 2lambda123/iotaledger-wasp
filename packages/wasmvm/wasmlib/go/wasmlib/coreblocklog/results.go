// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

package coreblocklog

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

type ImmutableControlAddressesResults struct {
	Proxy wasmtypes.Proxy
}

// the addresses have been set as state controller address or governing address since the following block index
func (s ImmutableControlAddressesResults) BlockIndex() wasmtypes.ScImmutableUint32 {
	return wasmtypes.NewScImmutableUint32(s.Proxy.Root(ResultBlockIndex))
}

func (s ImmutableControlAddressesResults) GoverningAddress() wasmtypes.ScImmutableAddress {
	return wasmtypes.NewScImmutableAddress(s.Proxy.Root(ResultGoverningAddress))
}

func (s ImmutableControlAddressesResults) StateControllerAddress() wasmtypes.ScImmutableAddress {
	return wasmtypes.NewScImmutableAddress(s.Proxy.Root(ResultStateControllerAddress))
}

type MutableControlAddressesResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableControlAddressesResults() MutableControlAddressesResults {
	return MutableControlAddressesResults{Proxy: wasmlib.NewResultsProxy()}
}

// the addresses have been set as state controller address or governing address since the following block index
func (s MutableControlAddressesResults) BlockIndex() wasmtypes.ScMutableUint32 {
	return wasmtypes.NewScMutableUint32(s.Proxy.Root(ResultBlockIndex))
}

func (s MutableControlAddressesResults) GoverningAddress() wasmtypes.ScMutableAddress {
	return wasmtypes.NewScMutableAddress(s.Proxy.Root(ResultGoverningAddress))
}

func (s MutableControlAddressesResults) StateControllerAddress() wasmtypes.ScMutableAddress {
	return wasmtypes.NewScMutableAddress(s.Proxy.Root(ResultStateControllerAddress))
}

type ImmutableGetBlockInfoResults struct {
	Proxy wasmtypes.Proxy
}

func (s ImmutableGetBlockInfoResults) BlockIndex() wasmtypes.ScImmutableUint32 {
	return wasmtypes.NewScImmutableUint32(s.Proxy.Root(ResultBlockIndex))
}

func (s ImmutableGetBlockInfoResults) BlockInfo() wasmtypes.ScImmutableBytes {
	return wasmtypes.NewScImmutableBytes(s.Proxy.Root(ResultBlockInfo))
}

type MutableGetBlockInfoResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableGetBlockInfoResults() MutableGetBlockInfoResults {
	return MutableGetBlockInfoResults{Proxy: wasmlib.NewResultsProxy()}
}

func (s MutableGetBlockInfoResults) BlockIndex() wasmtypes.ScMutableUint32 {
	return wasmtypes.NewScMutableUint32(s.Proxy.Root(ResultBlockIndex))
}

func (s MutableGetBlockInfoResults) BlockInfo() wasmtypes.ScMutableBytes {
	return wasmtypes.NewScMutableBytes(s.Proxy.Root(ResultBlockInfo))
}

type ArrayOfImmutableBytes struct {
	Proxy wasmtypes.Proxy
}

func (a ArrayOfImmutableBytes) Length() uint32 {
	return a.Proxy.Length()
}

func (a ArrayOfImmutableBytes) GetBytes(index uint32) wasmtypes.ScImmutableBytes {
	return wasmtypes.NewScImmutableBytes(a.Proxy.Index(index))
}

type ImmutableGetEventsForBlockResults struct {
	Proxy wasmtypes.Proxy
}

// native contract, so this is an Array16
func (s ImmutableGetEventsForBlockResults) Event() ArrayOfImmutableBytes {
	return ArrayOfImmutableBytes{Proxy: s.Proxy.Root(ResultEvent)}
}

type ArrayOfMutableBytes struct {
	Proxy wasmtypes.Proxy
}

func (a ArrayOfMutableBytes) AppendBytes() wasmtypes.ScMutableBytes {
	return wasmtypes.NewScMutableBytes(a.Proxy.Append())
}

func (a ArrayOfMutableBytes) Clear() {
	a.Proxy.ClearArray()
}

func (a ArrayOfMutableBytes) Length() uint32 {
	return a.Proxy.Length()
}

func (a ArrayOfMutableBytes) GetBytes(index uint32) wasmtypes.ScMutableBytes {
	return wasmtypes.NewScMutableBytes(a.Proxy.Index(index))
}

type MutableGetEventsForBlockResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableGetEventsForBlockResults() MutableGetEventsForBlockResults {
	return MutableGetEventsForBlockResults{Proxy: wasmlib.NewResultsProxy()}
}

// native contract, so this is an Array16
func (s MutableGetEventsForBlockResults) Event() ArrayOfMutableBytes {
	return ArrayOfMutableBytes{Proxy: s.Proxy.Root(ResultEvent)}
}

type ImmutableGetEventsForContractResults struct {
	Proxy wasmtypes.Proxy
}

// native contract, so this is an Array16
func (s ImmutableGetEventsForContractResults) Event() ArrayOfImmutableBytes {
	return ArrayOfImmutableBytes{Proxy: s.Proxy.Root(ResultEvent)}
}

type MutableGetEventsForContractResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableGetEventsForContractResults() MutableGetEventsForContractResults {
	return MutableGetEventsForContractResults{Proxy: wasmlib.NewResultsProxy()}
}

// native contract, so this is an Array16
func (s MutableGetEventsForContractResults) Event() ArrayOfMutableBytes {
	return ArrayOfMutableBytes{Proxy: s.Proxy.Root(ResultEvent)}
}

type ImmutableGetEventsForRequestResults struct {
	Proxy wasmtypes.Proxy
}

// native contract, so this is an Array16
func (s ImmutableGetEventsForRequestResults) Event() ArrayOfImmutableBytes {
	return ArrayOfImmutableBytes{Proxy: s.Proxy.Root(ResultEvent)}
}

type MutableGetEventsForRequestResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableGetEventsForRequestResults() MutableGetEventsForRequestResults {
	return MutableGetEventsForRequestResults{Proxy: wasmlib.NewResultsProxy()}
}

// native contract, so this is an Array16
func (s MutableGetEventsForRequestResults) Event() ArrayOfMutableBytes {
	return ArrayOfMutableBytes{Proxy: s.Proxy.Root(ResultEvent)}
}

type ArrayOfImmutableRequestID struct {
	Proxy wasmtypes.Proxy
}

func (a ArrayOfImmutableRequestID) Length() uint32 {
	return a.Proxy.Length()
}

func (a ArrayOfImmutableRequestID) GetRequestID(index uint32) wasmtypes.ScImmutableRequestID {
	return wasmtypes.NewScImmutableRequestID(a.Proxy.Index(index))
}

type ImmutableGetRequestIDsForBlockResults struct {
	Proxy wasmtypes.Proxy
}

// native contract, so this is an Array16
func (s ImmutableGetRequestIDsForBlockResults) RequestID() ArrayOfImmutableRequestID {
	return ArrayOfImmutableRequestID{Proxy: s.Proxy.Root(ResultRequestID)}
}

type ArrayOfMutableRequestID struct {
	Proxy wasmtypes.Proxy
}

func (a ArrayOfMutableRequestID) AppendRequestID() wasmtypes.ScMutableRequestID {
	return wasmtypes.NewScMutableRequestID(a.Proxy.Append())
}

func (a ArrayOfMutableRequestID) Clear() {
	a.Proxy.ClearArray()
}

func (a ArrayOfMutableRequestID) Length() uint32 {
	return a.Proxy.Length()
}

func (a ArrayOfMutableRequestID) GetRequestID(index uint32) wasmtypes.ScMutableRequestID {
	return wasmtypes.NewScMutableRequestID(a.Proxy.Index(index))
}

type MutableGetRequestIDsForBlockResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableGetRequestIDsForBlockResults() MutableGetRequestIDsForBlockResults {
	return MutableGetRequestIDsForBlockResults{Proxy: wasmlib.NewResultsProxy()}
}

// native contract, so this is an Array16
func (s MutableGetRequestIDsForBlockResults) RequestID() ArrayOfMutableRequestID {
	return ArrayOfMutableRequestID{Proxy: s.Proxy.Root(ResultRequestID)}
}

type ImmutableGetRequestReceiptResults struct {
	Proxy wasmtypes.Proxy
}

func (s ImmutableGetRequestReceiptResults) BlockIndex() wasmtypes.ScImmutableUint32 {
	return wasmtypes.NewScImmutableUint32(s.Proxy.Root(ResultBlockIndex))
}

func (s ImmutableGetRequestReceiptResults) RequestIndex() wasmtypes.ScImmutableUint16 {
	return wasmtypes.NewScImmutableUint16(s.Proxy.Root(ResultRequestIndex))
}

func (s ImmutableGetRequestReceiptResults) RequestRecord() wasmtypes.ScImmutableBytes {
	return wasmtypes.NewScImmutableBytes(s.Proxy.Root(ResultRequestRecord))
}

type MutableGetRequestReceiptResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableGetRequestReceiptResults() MutableGetRequestReceiptResults {
	return MutableGetRequestReceiptResults{Proxy: wasmlib.NewResultsProxy()}
}

func (s MutableGetRequestReceiptResults) BlockIndex() wasmtypes.ScMutableUint32 {
	return wasmtypes.NewScMutableUint32(s.Proxy.Root(ResultBlockIndex))
}

func (s MutableGetRequestReceiptResults) RequestIndex() wasmtypes.ScMutableUint16 {
	return wasmtypes.NewScMutableUint16(s.Proxy.Root(ResultRequestIndex))
}

func (s MutableGetRequestReceiptResults) RequestRecord() wasmtypes.ScMutableBytes {
	return wasmtypes.NewScMutableBytes(s.Proxy.Root(ResultRequestRecord))
}

type ImmutableGetRequestReceiptsForBlockResults struct {
	Proxy wasmtypes.Proxy
}

// native contract, so this is an Array16
func (s ImmutableGetRequestReceiptsForBlockResults) RequestRecord() ArrayOfImmutableBytes {
	return ArrayOfImmutableBytes{Proxy: s.Proxy.Root(ResultRequestRecord)}
}

type MutableGetRequestReceiptsForBlockResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableGetRequestReceiptsForBlockResults() MutableGetRequestReceiptsForBlockResults {
	return MutableGetRequestReceiptsForBlockResults{Proxy: wasmlib.NewResultsProxy()}
}

// native contract, so this is an Array16
func (s MutableGetRequestReceiptsForBlockResults) RequestRecord() ArrayOfMutableBytes {
	return ArrayOfMutableBytes{Proxy: s.Proxy.Root(ResultRequestRecord)}
}

type ImmutableIsRequestProcessedResults struct {
	Proxy wasmtypes.Proxy
}

func (s ImmutableIsRequestProcessedResults) RequestProcessed() wasmtypes.ScImmutableBool {
	return wasmtypes.NewScImmutableBool(s.Proxy.Root(ResultRequestProcessed))
}

type MutableIsRequestProcessedResults struct {
	Proxy wasmtypes.Proxy
}

func NewMutableIsRequestProcessedResults() MutableIsRequestProcessedResults {
	return MutableIsRequestProcessedResults{Proxy: wasmlib.NewResultsProxy()}
}

func (s MutableIsRequestProcessedResults) RequestProcessed() wasmtypes.ScMutableBool {
	return wasmtypes.NewScMutableBool(s.Proxy.Root(ResultRequestProcessed))
}
