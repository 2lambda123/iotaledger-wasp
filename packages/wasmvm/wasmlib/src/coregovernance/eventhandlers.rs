// Code generated by schema tool; DO NOT EDIT.

// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use std::collections::HashMap;

use crate::*;

use crate::*;

pub struct CoreGovernanceEventHandlers {
    my_id: u32,
    core_governance_handlers: HashMap<&'static str, fn(evt: &CoreGovernanceEventHandlers, dec: &mut WasmDecoder)>,

    rotate: Box<dyn Fn(&EventRotate)>,
}

impl IEventHandlers for CoreGovernanceEventHandlers {
    fn call_handler(&self, topic: &str, dec: &mut WasmDecoder) {
        if let Some(handler) = self.core_governance_handlers.get(topic) {
            handler(self, dec);
        }
    }

    fn id(&self) -> u32 {
        self.my_id
    }
}

unsafe impl Send for CoreGovernanceEventHandlers {}
unsafe impl Sync for CoreGovernanceEventHandlers {}

impl CoreGovernanceEventHandlers {
    pub fn new() -> CoreGovernanceEventHandlers {
        let mut handlers: HashMap<&str, fn(evt: &CoreGovernanceEventHandlers, dec: &mut WasmDecoder)> = HashMap::new();
        handlers.insert("coregovernance.rotate", |e, m| { (e.rotate)(&EventRotate::new(m)); });
        return CoreGovernanceEventHandlers {
            my_id: EventHandlers::generate_id(),
            core_governance_handlers: handlers,
            rotate: Box::new(|_e| {}),
        };
    }

    pub fn on_core_governance_rotate<F>(&mut self, handler: F)
        where F: Fn(&EventRotate) + 'static {
        self.rotate = Box::new(handler);
    }
}

pub struct EventRotate {
    pub timestamp: u64,
    pub new_addr: ScAddress,
    pub old_addr: ScAddress,
}

impl EventRotate {
    pub fn new(dec: &mut WasmDecoder) -> EventRotate {
        EventRotate {
            timestamp: uint64_decode(dec),
            new_addr: address_decode(dec),
            old_addr: address_decode(dec),
        }
    }
}
