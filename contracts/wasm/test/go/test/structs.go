// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package test

import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type TestStruct struct {
	Description string 
	Id          int32 
}

func NewTestStructFromBytes(bytes []byte) *TestStruct {
	decode := wasmlib.NewBytesDecoder(bytes)
	data := &TestStruct{}
	data.Description = decode.String()
	data.Id          = decode.Int32()
	decode.Close()
	return data
}

func (o *TestStruct) Bytes() []byte {
	return wasmlib.NewBytesEncoder().
		String(o.Description).
		Int32(o.Id).
		Data()
}

type ImmutableTestStruct struct {
	objID int32
	keyID wasmlib.Key32
}

func (o ImmutableTestStruct) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o ImmutableTestStruct) Value() *TestStruct {
	return NewTestStructFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}

type MutableTestStruct struct {
	objID int32
	keyID wasmlib.Key32
}

func (o MutableTestStruct) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o MutableTestStruct) SetValue(value *TestStruct) {
	wasmlib.SetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES, value.Bytes())
}

func (o MutableTestStruct) Value() *TestStruct {
	return NewTestStructFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}
