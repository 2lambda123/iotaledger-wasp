/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// BlockInfoResponse struct for BlockInfoResponse
type BlockInfoResponse struct {
	AnchorTransactionId *string `json:"anchorTransactionId,omitempty"`
	BlockIndex *int32 `json:"blockIndex,omitempty"`
	GasBurned *int64 `json:"gasBurned,omitempty"`
	GasFeeCharged *int64 `json:"gasFeeCharged,omitempty"`
	L1CommitmentHash *string `json:"l1CommitmentHash,omitempty"`
	NumOffLedgerRequests *int32 `json:"numOffLedgerRequests,omitempty"`
	NumSuccessfulRequests *int32 `json:"numSuccessfulRequests,omitempty"`
	PreviousL1CommitmentHash *string `json:"previousL1CommitmentHash,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	TotalBaseTokensInL2Accounts *int64 `json:"totalBaseTokensInL2Accounts,omitempty"`
	TotalRequests *int32 `json:"totalRequests,omitempty"`
	TotalStorageDeposit *int64 `json:"totalStorageDeposit,omitempty"`
	TransactionSubEssenceHash *string `json:"transactionSubEssenceHash,omitempty"`
}

// NewBlockInfoResponse instantiates a new BlockInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockInfoResponse() *BlockInfoResponse {
	this := BlockInfoResponse{}
	return &this
}

// NewBlockInfoResponseWithDefaults instantiates a new BlockInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockInfoResponseWithDefaults() *BlockInfoResponse {
	this := BlockInfoResponse{}
	return &this
}

// GetAnchorTransactionId returns the AnchorTransactionId field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetAnchorTransactionId() string {
	if o == nil || isNil(o.AnchorTransactionId) {
		var ret string
		return ret
	}
	return *o.AnchorTransactionId
}

// GetAnchorTransactionIdOk returns a tuple with the AnchorTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetAnchorTransactionIdOk() (*string, bool) {
	if o == nil || isNil(o.AnchorTransactionId) {
    return nil, false
	}
	return o.AnchorTransactionId, true
}

// HasAnchorTransactionId returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasAnchorTransactionId() bool {
	if o != nil && !isNil(o.AnchorTransactionId) {
		return true
	}

	return false
}

// SetAnchorTransactionId gets a reference to the given string and assigns it to the AnchorTransactionId field.
func (o *BlockInfoResponse) SetAnchorTransactionId(v string) {
	o.AnchorTransactionId = &v
}

// GetBlockIndex returns the BlockIndex field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetBlockIndex() int32 {
	if o == nil || isNil(o.BlockIndex) {
		var ret int32
		return ret
	}
	return *o.BlockIndex
}

// GetBlockIndexOk returns a tuple with the BlockIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetBlockIndexOk() (*int32, bool) {
	if o == nil || isNil(o.BlockIndex) {
    return nil, false
	}
	return o.BlockIndex, true
}

// HasBlockIndex returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasBlockIndex() bool {
	if o != nil && !isNil(o.BlockIndex) {
		return true
	}

	return false
}

// SetBlockIndex gets a reference to the given int32 and assigns it to the BlockIndex field.
func (o *BlockInfoResponse) SetBlockIndex(v int32) {
	o.BlockIndex = &v
}

// GetGasBurned returns the GasBurned field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetGasBurned() int64 {
	if o == nil || isNil(o.GasBurned) {
		var ret int64
		return ret
	}
	return *o.GasBurned
}

// GetGasBurnedOk returns a tuple with the GasBurned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetGasBurnedOk() (*int64, bool) {
	if o == nil || isNil(o.GasBurned) {
    return nil, false
	}
	return o.GasBurned, true
}

// HasGasBurned returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasGasBurned() bool {
	if o != nil && !isNil(o.GasBurned) {
		return true
	}

	return false
}

// SetGasBurned gets a reference to the given int64 and assigns it to the GasBurned field.
func (o *BlockInfoResponse) SetGasBurned(v int64) {
	o.GasBurned = &v
}

// GetGasFeeCharged returns the GasFeeCharged field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetGasFeeCharged() int64 {
	if o == nil || isNil(o.GasFeeCharged) {
		var ret int64
		return ret
	}
	return *o.GasFeeCharged
}

// GetGasFeeChargedOk returns a tuple with the GasFeeCharged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetGasFeeChargedOk() (*int64, bool) {
	if o == nil || isNil(o.GasFeeCharged) {
    return nil, false
	}
	return o.GasFeeCharged, true
}

// HasGasFeeCharged returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasGasFeeCharged() bool {
	if o != nil && !isNil(o.GasFeeCharged) {
		return true
	}

	return false
}

// SetGasFeeCharged gets a reference to the given int64 and assigns it to the GasFeeCharged field.
func (o *BlockInfoResponse) SetGasFeeCharged(v int64) {
	o.GasFeeCharged = &v
}

// GetL1CommitmentHash returns the L1CommitmentHash field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetL1CommitmentHash() string {
	if o == nil || isNil(o.L1CommitmentHash) {
		var ret string
		return ret
	}
	return *o.L1CommitmentHash
}

// GetL1CommitmentHashOk returns a tuple with the L1CommitmentHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetL1CommitmentHashOk() (*string, bool) {
	if o == nil || isNil(o.L1CommitmentHash) {
    return nil, false
	}
	return o.L1CommitmentHash, true
}

// HasL1CommitmentHash returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasL1CommitmentHash() bool {
	if o != nil && !isNil(o.L1CommitmentHash) {
		return true
	}

	return false
}

// SetL1CommitmentHash gets a reference to the given string and assigns it to the L1CommitmentHash field.
func (o *BlockInfoResponse) SetL1CommitmentHash(v string) {
	o.L1CommitmentHash = &v
}

// GetNumOffLedgerRequests returns the NumOffLedgerRequests field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetNumOffLedgerRequests() int32 {
	if o == nil || isNil(o.NumOffLedgerRequests) {
		var ret int32
		return ret
	}
	return *o.NumOffLedgerRequests
}

// GetNumOffLedgerRequestsOk returns a tuple with the NumOffLedgerRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetNumOffLedgerRequestsOk() (*int32, bool) {
	if o == nil || isNil(o.NumOffLedgerRequests) {
    return nil, false
	}
	return o.NumOffLedgerRequests, true
}

// HasNumOffLedgerRequests returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasNumOffLedgerRequests() bool {
	if o != nil && !isNil(o.NumOffLedgerRequests) {
		return true
	}

	return false
}

// SetNumOffLedgerRequests gets a reference to the given int32 and assigns it to the NumOffLedgerRequests field.
func (o *BlockInfoResponse) SetNumOffLedgerRequests(v int32) {
	o.NumOffLedgerRequests = &v
}

// GetNumSuccessfulRequests returns the NumSuccessfulRequests field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetNumSuccessfulRequests() int32 {
	if o == nil || isNil(o.NumSuccessfulRequests) {
		var ret int32
		return ret
	}
	return *o.NumSuccessfulRequests
}

// GetNumSuccessfulRequestsOk returns a tuple with the NumSuccessfulRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetNumSuccessfulRequestsOk() (*int32, bool) {
	if o == nil || isNil(o.NumSuccessfulRequests) {
    return nil, false
	}
	return o.NumSuccessfulRequests, true
}

// HasNumSuccessfulRequests returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasNumSuccessfulRequests() bool {
	if o != nil && !isNil(o.NumSuccessfulRequests) {
		return true
	}

	return false
}

// SetNumSuccessfulRequests gets a reference to the given int32 and assigns it to the NumSuccessfulRequests field.
func (o *BlockInfoResponse) SetNumSuccessfulRequests(v int32) {
	o.NumSuccessfulRequests = &v
}

// GetPreviousL1CommitmentHash returns the PreviousL1CommitmentHash field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetPreviousL1CommitmentHash() string {
	if o == nil || isNil(o.PreviousL1CommitmentHash) {
		var ret string
		return ret
	}
	return *o.PreviousL1CommitmentHash
}

// GetPreviousL1CommitmentHashOk returns a tuple with the PreviousL1CommitmentHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetPreviousL1CommitmentHashOk() (*string, bool) {
	if o == nil || isNil(o.PreviousL1CommitmentHash) {
    return nil, false
	}
	return o.PreviousL1CommitmentHash, true
}

// HasPreviousL1CommitmentHash returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasPreviousL1CommitmentHash() bool {
	if o != nil && !isNil(o.PreviousL1CommitmentHash) {
		return true
	}

	return false
}

// SetPreviousL1CommitmentHash gets a reference to the given string and assigns it to the PreviousL1CommitmentHash field.
func (o *BlockInfoResponse) SetPreviousL1CommitmentHash(v string) {
	o.PreviousL1CommitmentHash = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetTimestamp() time.Time {
	if o == nil || isNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetTimestampOk() (*time.Time, bool) {
	if o == nil || isNil(o.Timestamp) {
    return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *BlockInfoResponse) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetTotalBaseTokensInL2Accounts returns the TotalBaseTokensInL2Accounts field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetTotalBaseTokensInL2Accounts() int64 {
	if o == nil || isNil(o.TotalBaseTokensInL2Accounts) {
		var ret int64
		return ret
	}
	return *o.TotalBaseTokensInL2Accounts
}

// GetTotalBaseTokensInL2AccountsOk returns a tuple with the TotalBaseTokensInL2Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetTotalBaseTokensInL2AccountsOk() (*int64, bool) {
	if o == nil || isNil(o.TotalBaseTokensInL2Accounts) {
    return nil, false
	}
	return o.TotalBaseTokensInL2Accounts, true
}

// HasTotalBaseTokensInL2Accounts returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasTotalBaseTokensInL2Accounts() bool {
	if o != nil && !isNil(o.TotalBaseTokensInL2Accounts) {
		return true
	}

	return false
}

// SetTotalBaseTokensInL2Accounts gets a reference to the given int64 and assigns it to the TotalBaseTokensInL2Accounts field.
func (o *BlockInfoResponse) SetTotalBaseTokensInL2Accounts(v int64) {
	o.TotalBaseTokensInL2Accounts = &v
}

// GetTotalRequests returns the TotalRequests field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetTotalRequests() int32 {
	if o == nil || isNil(o.TotalRequests) {
		var ret int32
		return ret
	}
	return *o.TotalRequests
}

// GetTotalRequestsOk returns a tuple with the TotalRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetTotalRequestsOk() (*int32, bool) {
	if o == nil || isNil(o.TotalRequests) {
    return nil, false
	}
	return o.TotalRequests, true
}

// HasTotalRequests returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasTotalRequests() bool {
	if o != nil && !isNil(o.TotalRequests) {
		return true
	}

	return false
}

// SetTotalRequests gets a reference to the given int32 and assigns it to the TotalRequests field.
func (o *BlockInfoResponse) SetTotalRequests(v int32) {
	o.TotalRequests = &v
}

// GetTotalStorageDeposit returns the TotalStorageDeposit field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetTotalStorageDeposit() int64 {
	if o == nil || isNil(o.TotalStorageDeposit) {
		var ret int64
		return ret
	}
	return *o.TotalStorageDeposit
}

// GetTotalStorageDepositOk returns a tuple with the TotalStorageDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetTotalStorageDepositOk() (*int64, bool) {
	if o == nil || isNil(o.TotalStorageDeposit) {
    return nil, false
	}
	return o.TotalStorageDeposit, true
}

// HasTotalStorageDeposit returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasTotalStorageDeposit() bool {
	if o != nil && !isNil(o.TotalStorageDeposit) {
		return true
	}

	return false
}

// SetTotalStorageDeposit gets a reference to the given int64 and assigns it to the TotalStorageDeposit field.
func (o *BlockInfoResponse) SetTotalStorageDeposit(v int64) {
	o.TotalStorageDeposit = &v
}

// GetTransactionSubEssenceHash returns the TransactionSubEssenceHash field value if set, zero value otherwise.
func (o *BlockInfoResponse) GetTransactionSubEssenceHash() string {
	if o == nil || isNil(o.TransactionSubEssenceHash) {
		var ret string
		return ret
	}
	return *o.TransactionSubEssenceHash
}

// GetTransactionSubEssenceHashOk returns a tuple with the TransactionSubEssenceHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInfoResponse) GetTransactionSubEssenceHashOk() (*string, bool) {
	if o == nil || isNil(o.TransactionSubEssenceHash) {
    return nil, false
	}
	return o.TransactionSubEssenceHash, true
}

// HasTransactionSubEssenceHash returns a boolean if a field has been set.
func (o *BlockInfoResponse) HasTransactionSubEssenceHash() bool {
	if o != nil && !isNil(o.TransactionSubEssenceHash) {
		return true
	}

	return false
}

// SetTransactionSubEssenceHash gets a reference to the given string and assigns it to the TransactionSubEssenceHash field.
func (o *BlockInfoResponse) SetTransactionSubEssenceHash(v string) {
	o.TransactionSubEssenceHash = &v
}

func (o BlockInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AnchorTransactionId) {
		toSerialize["anchorTransactionId"] = o.AnchorTransactionId
	}
	if !isNil(o.BlockIndex) {
		toSerialize["blockIndex"] = o.BlockIndex
	}
	if !isNil(o.GasBurned) {
		toSerialize["gasBurned"] = o.GasBurned
	}
	if !isNil(o.GasFeeCharged) {
		toSerialize["gasFeeCharged"] = o.GasFeeCharged
	}
	if !isNil(o.L1CommitmentHash) {
		toSerialize["l1CommitmentHash"] = o.L1CommitmentHash
	}
	if !isNil(o.NumOffLedgerRequests) {
		toSerialize["numOffLedgerRequests"] = o.NumOffLedgerRequests
	}
	if !isNil(o.NumSuccessfulRequests) {
		toSerialize["numSuccessfulRequests"] = o.NumSuccessfulRequests
	}
	if !isNil(o.PreviousL1CommitmentHash) {
		toSerialize["previousL1CommitmentHash"] = o.PreviousL1CommitmentHash
	}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !isNil(o.TotalBaseTokensInL2Accounts) {
		toSerialize["totalBaseTokensInL2Accounts"] = o.TotalBaseTokensInL2Accounts
	}
	if !isNil(o.TotalRequests) {
		toSerialize["totalRequests"] = o.TotalRequests
	}
	if !isNil(o.TotalStorageDeposit) {
		toSerialize["totalStorageDeposit"] = o.TotalStorageDeposit
	}
	if !isNil(o.TransactionSubEssenceHash) {
		toSerialize["transactionSubEssenceHash"] = o.TransactionSubEssenceHash
	}
	return json.Marshal(toSerialize)
}

type NullableBlockInfoResponse struct {
	value *BlockInfoResponse
	isSet bool
}

func (v NullableBlockInfoResponse) Get() *BlockInfoResponse {
	return v.value
}

func (v *NullableBlockInfoResponse) Set(val *BlockInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockInfoResponse(val *BlockInfoResponse) *NullableBlockInfoResponse {
	return &NullableBlockInfoResponse{value: val, isSet: true}
}

func (v NullableBlockInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


