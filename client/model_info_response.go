/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InfoResponse struct for InfoResponse
type InfoResponse struct {
	L1Params *L1Params `json:"l1Params,omitempty"`
	// The net id of the node
	NetID *string `json:"netID,omitempty"`
	// The public key of the node (Hex)
	PublicKey *string `json:"publicKey,omitempty"`
	// The version of the node
	Version *string `json:"version,omitempty"`
}

// NewInfoResponse instantiates a new InfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoResponse() *InfoResponse {
	this := InfoResponse{}
	return &this
}

// NewInfoResponseWithDefaults instantiates a new InfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoResponseWithDefaults() *InfoResponse {
	this := InfoResponse{}
	return &this
}

// GetL1Params returns the L1Params field value if set, zero value otherwise.
func (o *InfoResponse) GetL1Params() L1Params {
	if o == nil || isNil(o.L1Params) {
		var ret L1Params
		return ret
	}
	return *o.L1Params
}

// GetL1ParamsOk returns a tuple with the L1Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetL1ParamsOk() (*L1Params, bool) {
	if o == nil || isNil(o.L1Params) {
    return nil, false
	}
	return o.L1Params, true
}

// HasL1Params returns a boolean if a field has been set.
func (o *InfoResponse) HasL1Params() bool {
	if o != nil && !isNil(o.L1Params) {
		return true
	}

	return false
}

// SetL1Params gets a reference to the given L1Params and assigns it to the L1Params field.
func (o *InfoResponse) SetL1Params(v L1Params) {
	o.L1Params = &v
}

// GetNetID returns the NetID field value if set, zero value otherwise.
func (o *InfoResponse) GetNetID() string {
	if o == nil || isNil(o.NetID) {
		var ret string
		return ret
	}
	return *o.NetID
}

// GetNetIDOk returns a tuple with the NetID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetNetIDOk() (*string, bool) {
	if o == nil || isNil(o.NetID) {
    return nil, false
	}
	return o.NetID, true
}

// HasNetID returns a boolean if a field has been set.
func (o *InfoResponse) HasNetID() bool {
	if o != nil && !isNil(o.NetID) {
		return true
	}

	return false
}

// SetNetID gets a reference to the given string and assigns it to the NetID field.
func (o *InfoResponse) SetNetID(v string) {
	o.NetID = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *InfoResponse) GetPublicKey() string {
	if o == nil || isNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.PublicKey) {
    return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *InfoResponse) HasPublicKey() bool {
	if o != nil && !isNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *InfoResponse) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InfoResponse) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoResponse) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InfoResponse) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InfoResponse) SetVersion(v string) {
	o.Version = &v
}

func (o InfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.L1Params) {
		toSerialize["l1Params"] = o.L1Params
	}
	if !isNil(o.NetID) {
		toSerialize["netID"] = o.NetID
	}
	if !isNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableInfoResponse struct {
	value *InfoResponse
	isSet bool
}

func (v NullableInfoResponse) Get() *InfoResponse {
	return v.value
}

func (v *NullableInfoResponse) Set(val *InfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoResponse(val *InfoResponse) *NullableInfoResponse {
	return &NullableInfoResponse{value: val, isSet: true}
}

func (v NullableInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


