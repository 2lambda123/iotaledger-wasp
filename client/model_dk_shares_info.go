/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// DKSharesInfo struct for DKSharesInfo
type DKSharesInfo struct {
	// New generated shared address.
	Address *string `json:"address,omitempty"`
	// Identities of the nodes sharing the key. (Hex)
	PeerIdentities []string `json:"peerIdentities,omitempty"`
	PeerIndex *int32 `json:"peerIndex,omitempty"`
	// Used public key. (Hex)
	PublicKey *string `json:"publicKey,omitempty"`
	// Public key shares for all the peers. (Hex)
	PublicKeyShares []string `json:"publicKeyShares,omitempty"`
	Threshold *int32 `json:"threshold,omitempty"`
}

// NewDKSharesInfo instantiates a new DKSharesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDKSharesInfo() *DKSharesInfo {
	this := DKSharesInfo{}
	return &this
}

// NewDKSharesInfoWithDefaults instantiates a new DKSharesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDKSharesInfoWithDefaults() *DKSharesInfo {
	this := DKSharesInfo{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DKSharesInfo) GetAddress() string {
	if o == nil || isNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DKSharesInfo) GetAddressOk() (*string, bool) {
	if o == nil || isNil(o.Address) {
    return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DKSharesInfo) HasAddress() bool {
	if o != nil && !isNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *DKSharesInfo) SetAddress(v string) {
	o.Address = &v
}

// GetPeerIdentities returns the PeerIdentities field value if set, zero value otherwise.
func (o *DKSharesInfo) GetPeerIdentities() []string {
	if o == nil || isNil(o.PeerIdentities) {
		var ret []string
		return ret
	}
	return o.PeerIdentities
}

// GetPeerIdentitiesOk returns a tuple with the PeerIdentities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DKSharesInfo) GetPeerIdentitiesOk() ([]string, bool) {
	if o == nil || isNil(o.PeerIdentities) {
    return nil, false
	}
	return o.PeerIdentities, true
}

// HasPeerIdentities returns a boolean if a field has been set.
func (o *DKSharesInfo) HasPeerIdentities() bool {
	if o != nil && !isNil(o.PeerIdentities) {
		return true
	}

	return false
}

// SetPeerIdentities gets a reference to the given []string and assigns it to the PeerIdentities field.
func (o *DKSharesInfo) SetPeerIdentities(v []string) {
	o.PeerIdentities = v
}

// GetPeerIndex returns the PeerIndex field value if set, zero value otherwise.
func (o *DKSharesInfo) GetPeerIndex() int32 {
	if o == nil || isNil(o.PeerIndex) {
		var ret int32
		return ret
	}
	return *o.PeerIndex
}

// GetPeerIndexOk returns a tuple with the PeerIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DKSharesInfo) GetPeerIndexOk() (*int32, bool) {
	if o == nil || isNil(o.PeerIndex) {
    return nil, false
	}
	return o.PeerIndex, true
}

// HasPeerIndex returns a boolean if a field has been set.
func (o *DKSharesInfo) HasPeerIndex() bool {
	if o != nil && !isNil(o.PeerIndex) {
		return true
	}

	return false
}

// SetPeerIndex gets a reference to the given int32 and assigns it to the PeerIndex field.
func (o *DKSharesInfo) SetPeerIndex(v int32) {
	o.PeerIndex = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *DKSharesInfo) GetPublicKey() string {
	if o == nil || isNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DKSharesInfo) GetPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.PublicKey) {
    return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *DKSharesInfo) HasPublicKey() bool {
	if o != nil && !isNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *DKSharesInfo) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetPublicKeyShares returns the PublicKeyShares field value if set, zero value otherwise.
func (o *DKSharesInfo) GetPublicKeyShares() []string {
	if o == nil || isNil(o.PublicKeyShares) {
		var ret []string
		return ret
	}
	return o.PublicKeyShares
}

// GetPublicKeySharesOk returns a tuple with the PublicKeyShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DKSharesInfo) GetPublicKeySharesOk() ([]string, bool) {
	if o == nil || isNil(o.PublicKeyShares) {
    return nil, false
	}
	return o.PublicKeyShares, true
}

// HasPublicKeyShares returns a boolean if a field has been set.
func (o *DKSharesInfo) HasPublicKeyShares() bool {
	if o != nil && !isNil(o.PublicKeyShares) {
		return true
	}

	return false
}

// SetPublicKeyShares gets a reference to the given []string and assigns it to the PublicKeyShares field.
func (o *DKSharesInfo) SetPublicKeyShares(v []string) {
	o.PublicKeyShares = v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *DKSharesInfo) GetThreshold() int32 {
	if o == nil || isNil(o.Threshold) {
		var ret int32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DKSharesInfo) GetThresholdOk() (*int32, bool) {
	if o == nil || isNil(o.Threshold) {
    return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *DKSharesInfo) HasThreshold() bool {
	if o != nil && !isNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given int32 and assigns it to the Threshold field.
func (o *DKSharesInfo) SetThreshold(v int32) {
	o.Threshold = &v
}

func (o DKSharesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !isNil(o.PeerIdentities) {
		toSerialize["peerIdentities"] = o.PeerIdentities
	}
	if !isNil(o.PeerIndex) {
		toSerialize["peerIndex"] = o.PeerIndex
	}
	if !isNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !isNil(o.PublicKeyShares) {
		toSerialize["publicKeyShares"] = o.PublicKeyShares
	}
	if !isNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return json.Marshal(toSerialize)
}

type NullableDKSharesInfo struct {
	value *DKSharesInfo
	isSet bool
}

func (v NullableDKSharesInfo) Get() *DKSharesInfo {
	return v.value
}

func (v *NullableDKSharesInfo) Set(val *DKSharesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDKSharesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDKSharesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDKSharesInfo(val *DKSharesInfo) *NullableDKSharesInfo {
	return &NullableDKSharesInfo{value: val, isSet: true}
}

func (v NullableDKSharesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDKSharesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


