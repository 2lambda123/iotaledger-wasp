/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NFTDataResponse struct for NFTDataResponse
type NFTDataResponse struct {
	Id *string `json:"id,omitempty"`
	Issuer *string `json:"issuer,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
	Owner *string `json:"owner,omitempty"`
}

// NewNFTDataResponse instantiates a new NFTDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFTDataResponse() *NFTDataResponse {
	this := NFTDataResponse{}
	return &this
}

// NewNFTDataResponseWithDefaults instantiates a new NFTDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFTDataResponseWithDefaults() *NFTDataResponse {
	this := NFTDataResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NFTDataResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDataResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NFTDataResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NFTDataResponse) SetId(v string) {
	o.Id = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *NFTDataResponse) GetIssuer() string {
	if o == nil || isNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDataResponse) GetIssuerOk() (*string, bool) {
	if o == nil || isNil(o.Issuer) {
    return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *NFTDataResponse) HasIssuer() bool {
	if o != nil && !isNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *NFTDataResponse) SetIssuer(v string) {
	o.Issuer = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *NFTDataResponse) GetMetadata() string {
	if o == nil || isNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDataResponse) GetMetadataOk() (*string, bool) {
	if o == nil || isNil(o.Metadata) {
    return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *NFTDataResponse) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *NFTDataResponse) SetMetadata(v string) {
	o.Metadata = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *NFTDataResponse) GetOwner() string {
	if o == nil || isNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDataResponse) GetOwnerOk() (*string, bool) {
	if o == nil || isNil(o.Owner) {
    return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *NFTDataResponse) HasOwner() bool {
	if o != nil && !isNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *NFTDataResponse) SetOwner(v string) {
	o.Owner = &v
}

func (o NFTDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return json.Marshal(toSerialize)
}

type NullableNFTDataResponse struct {
	value *NFTDataResponse
	isSet bool
}

func (v NullableNFTDataResponse) Get() *NFTDataResponse {
	return v.value
}

func (v *NullableNFTDataResponse) Set(val *NFTDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNFTDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNFTDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFTDataResponse(val *NFTDataResponse) *NullableNFTDataResponse {
	return &NullableNFTDataResponse{value: val, isSet: true}
}

func (v NullableNFTDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFTDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


