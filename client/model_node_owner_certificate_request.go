/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NodeOwnerCertificateRequest struct for NodeOwnerCertificateRequest
type NodeOwnerCertificateRequest struct {
	// Node owner address. (Bech32)
	OwnerAddress *string `json:"ownerAddress,omitempty"`
	// The public key of the node (Hex)
	PublicKey *string `json:"publicKey,omitempty"`
}

// NewNodeOwnerCertificateRequest instantiates a new NodeOwnerCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeOwnerCertificateRequest() *NodeOwnerCertificateRequest {
	this := NodeOwnerCertificateRequest{}
	return &this
}

// NewNodeOwnerCertificateRequestWithDefaults instantiates a new NodeOwnerCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeOwnerCertificateRequestWithDefaults() *NodeOwnerCertificateRequest {
	this := NodeOwnerCertificateRequest{}
	return &this
}

// GetOwnerAddress returns the OwnerAddress field value if set, zero value otherwise.
func (o *NodeOwnerCertificateRequest) GetOwnerAddress() string {
	if o == nil || isNil(o.OwnerAddress) {
		var ret string
		return ret
	}
	return *o.OwnerAddress
}

// GetOwnerAddressOk returns a tuple with the OwnerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeOwnerCertificateRequest) GetOwnerAddressOk() (*string, bool) {
	if o == nil || isNil(o.OwnerAddress) {
    return nil, false
	}
	return o.OwnerAddress, true
}

// HasOwnerAddress returns a boolean if a field has been set.
func (o *NodeOwnerCertificateRequest) HasOwnerAddress() bool {
	if o != nil && !isNil(o.OwnerAddress) {
		return true
	}

	return false
}

// SetOwnerAddress gets a reference to the given string and assigns it to the OwnerAddress field.
func (o *NodeOwnerCertificateRequest) SetOwnerAddress(v string) {
	o.OwnerAddress = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *NodeOwnerCertificateRequest) GetPublicKey() string {
	if o == nil || isNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeOwnerCertificateRequest) GetPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.PublicKey) {
    return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *NodeOwnerCertificateRequest) HasPublicKey() bool {
	if o != nil && !isNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *NodeOwnerCertificateRequest) SetPublicKey(v string) {
	o.PublicKey = &v
}

func (o NodeOwnerCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OwnerAddress) {
		toSerialize["ownerAddress"] = o.OwnerAddress
	}
	if !isNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	return json.Marshal(toSerialize)
}

type NullableNodeOwnerCertificateRequest struct {
	value *NodeOwnerCertificateRequest
	isSet bool
}

func (v NullableNodeOwnerCertificateRequest) Get() *NodeOwnerCertificateRequest {
	return v.value
}

func (v *NullableNodeOwnerCertificateRequest) Set(val *NodeOwnerCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeOwnerCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeOwnerCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeOwnerCertificateRequest(val *NodeOwnerCertificateRequest) *NullableNodeOwnerCertificateRequest {
	return &NullableNodeOwnerCertificateRequest{value: val, isSet: true}
}

func (v NullableNodeOwnerCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeOwnerCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


