/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ProtocolParameters struct for ProtocolParameters
type ProtocolParameters struct {
	// The human readable network prefix
	Bech32Hrp *string `json:"bech32Hrp,omitempty"`
	// The networks max depth
	BelowMaxDepth *int32 `json:"belowMaxDepth,omitempty"`
	// The minimal PoW score
	MinPowScore *int32 `json:"minPowScore,omitempty"`
	// The network name
	NetworkName *string `json:"networkName,omitempty"`
	RentStructure *RentStructure `json:"rentStructure,omitempty"`
	// The token supply
	TokenSupply *string `json:"tokenSupply,omitempty"`
	// The protocol version
	Version *int32 `json:"version,omitempty"`
}

// NewProtocolParameters instantiates a new ProtocolParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocolParameters() *ProtocolParameters {
	this := ProtocolParameters{}
	return &this
}

// NewProtocolParametersWithDefaults instantiates a new ProtocolParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolParametersWithDefaults() *ProtocolParameters {
	this := ProtocolParameters{}
	return &this
}

// GetBech32Hrp returns the Bech32Hrp field value if set, zero value otherwise.
func (o *ProtocolParameters) GetBech32Hrp() string {
	if o == nil || isNil(o.Bech32Hrp) {
		var ret string
		return ret
	}
	return *o.Bech32Hrp
}

// GetBech32HrpOk returns a tuple with the Bech32Hrp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolParameters) GetBech32HrpOk() (*string, bool) {
	if o == nil || isNil(o.Bech32Hrp) {
    return nil, false
	}
	return o.Bech32Hrp, true
}

// HasBech32Hrp returns a boolean if a field has been set.
func (o *ProtocolParameters) HasBech32Hrp() bool {
	if o != nil && !isNil(o.Bech32Hrp) {
		return true
	}

	return false
}

// SetBech32Hrp gets a reference to the given string and assigns it to the Bech32Hrp field.
func (o *ProtocolParameters) SetBech32Hrp(v string) {
	o.Bech32Hrp = &v
}

// GetBelowMaxDepth returns the BelowMaxDepth field value if set, zero value otherwise.
func (o *ProtocolParameters) GetBelowMaxDepth() int32 {
	if o == nil || isNil(o.BelowMaxDepth) {
		var ret int32
		return ret
	}
	return *o.BelowMaxDepth
}

// GetBelowMaxDepthOk returns a tuple with the BelowMaxDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolParameters) GetBelowMaxDepthOk() (*int32, bool) {
	if o == nil || isNil(o.BelowMaxDepth) {
    return nil, false
	}
	return o.BelowMaxDepth, true
}

// HasBelowMaxDepth returns a boolean if a field has been set.
func (o *ProtocolParameters) HasBelowMaxDepth() bool {
	if o != nil && !isNil(o.BelowMaxDepth) {
		return true
	}

	return false
}

// SetBelowMaxDepth gets a reference to the given int32 and assigns it to the BelowMaxDepth field.
func (o *ProtocolParameters) SetBelowMaxDepth(v int32) {
	o.BelowMaxDepth = &v
}

// GetMinPowScore returns the MinPowScore field value if set, zero value otherwise.
func (o *ProtocolParameters) GetMinPowScore() int32 {
	if o == nil || isNil(o.MinPowScore) {
		var ret int32
		return ret
	}
	return *o.MinPowScore
}

// GetMinPowScoreOk returns a tuple with the MinPowScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolParameters) GetMinPowScoreOk() (*int32, bool) {
	if o == nil || isNil(o.MinPowScore) {
    return nil, false
	}
	return o.MinPowScore, true
}

// HasMinPowScore returns a boolean if a field has been set.
func (o *ProtocolParameters) HasMinPowScore() bool {
	if o != nil && !isNil(o.MinPowScore) {
		return true
	}

	return false
}

// SetMinPowScore gets a reference to the given int32 and assigns it to the MinPowScore field.
func (o *ProtocolParameters) SetMinPowScore(v int32) {
	o.MinPowScore = &v
}

// GetNetworkName returns the NetworkName field value if set, zero value otherwise.
func (o *ProtocolParameters) GetNetworkName() string {
	if o == nil || isNil(o.NetworkName) {
		var ret string
		return ret
	}
	return *o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolParameters) GetNetworkNameOk() (*string, bool) {
	if o == nil || isNil(o.NetworkName) {
    return nil, false
	}
	return o.NetworkName, true
}

// HasNetworkName returns a boolean if a field has been set.
func (o *ProtocolParameters) HasNetworkName() bool {
	if o != nil && !isNil(o.NetworkName) {
		return true
	}

	return false
}

// SetNetworkName gets a reference to the given string and assigns it to the NetworkName field.
func (o *ProtocolParameters) SetNetworkName(v string) {
	o.NetworkName = &v
}

// GetRentStructure returns the RentStructure field value if set, zero value otherwise.
func (o *ProtocolParameters) GetRentStructure() RentStructure {
	if o == nil || isNil(o.RentStructure) {
		var ret RentStructure
		return ret
	}
	return *o.RentStructure
}

// GetRentStructureOk returns a tuple with the RentStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolParameters) GetRentStructureOk() (*RentStructure, bool) {
	if o == nil || isNil(o.RentStructure) {
    return nil, false
	}
	return o.RentStructure, true
}

// HasRentStructure returns a boolean if a field has been set.
func (o *ProtocolParameters) HasRentStructure() bool {
	if o != nil && !isNil(o.RentStructure) {
		return true
	}

	return false
}

// SetRentStructure gets a reference to the given RentStructure and assigns it to the RentStructure field.
func (o *ProtocolParameters) SetRentStructure(v RentStructure) {
	o.RentStructure = &v
}

// GetTokenSupply returns the TokenSupply field value if set, zero value otherwise.
func (o *ProtocolParameters) GetTokenSupply() string {
	if o == nil || isNil(o.TokenSupply) {
		var ret string
		return ret
	}
	return *o.TokenSupply
}

// GetTokenSupplyOk returns a tuple with the TokenSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolParameters) GetTokenSupplyOk() (*string, bool) {
	if o == nil || isNil(o.TokenSupply) {
    return nil, false
	}
	return o.TokenSupply, true
}

// HasTokenSupply returns a boolean if a field has been set.
func (o *ProtocolParameters) HasTokenSupply() bool {
	if o != nil && !isNil(o.TokenSupply) {
		return true
	}

	return false
}

// SetTokenSupply gets a reference to the given string and assigns it to the TokenSupply field.
func (o *ProtocolParameters) SetTokenSupply(v string) {
	o.TokenSupply = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ProtocolParameters) GetVersion() int32 {
	if o == nil || isNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolParameters) GetVersionOk() (*int32, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ProtocolParameters) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *ProtocolParameters) SetVersion(v int32) {
	o.Version = &v
}

func (o ProtocolParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Bech32Hrp) {
		toSerialize["bech32Hrp"] = o.Bech32Hrp
	}
	if !isNil(o.BelowMaxDepth) {
		toSerialize["belowMaxDepth"] = o.BelowMaxDepth
	}
	if !isNil(o.MinPowScore) {
		toSerialize["minPowScore"] = o.MinPowScore
	}
	if !isNil(o.NetworkName) {
		toSerialize["networkName"] = o.NetworkName
	}
	if !isNil(o.RentStructure) {
		toSerialize["rentStructure"] = o.RentStructure
	}
	if !isNil(o.TokenSupply) {
		toSerialize["tokenSupply"] = o.TokenSupply
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableProtocolParameters struct {
	value *ProtocolParameters
	isSet bool
}

func (v NullableProtocolParameters) Get() *ProtocolParameters {
	return v.value
}

func (v *NullableProtocolParameters) Set(val *ProtocolParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolParameters(val *ProtocolParameters) *NullableProtocolParameters {
	return &NullableProtocolParameters{value: val, isSet: true}
}

func (v NullableProtocolParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


