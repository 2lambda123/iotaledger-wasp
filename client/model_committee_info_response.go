/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CommitteeInfoResponse struct for CommitteeInfoResponse
type CommitteeInfoResponse struct {
	// A list of all access nodes and their peering info.
	AccessNodes []CommitteeNode `json:"accessNodes,omitempty"`
	// Whether or not the chain is active.
	Active *bool `json:"active,omitempty"`
	// A list of all candidate nodes and their peering info.
	CandidateNodes []CommitteeNode `json:"candidateNodes,omitempty"`
	// ChainID (Bech32-encoded).
	ChainId *string `json:"chainId,omitempty"`
	// A list of all committee nodes and their peering info.
	CommitteeNodes []CommitteeNode `json:"committeeNodes,omitempty"`
	StateAddress *string `json:"stateAddress,omitempty"`
}

// NewCommitteeInfoResponse instantiates a new CommitteeInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitteeInfoResponse() *CommitteeInfoResponse {
	this := CommitteeInfoResponse{}
	return &this
}

// NewCommitteeInfoResponseWithDefaults instantiates a new CommitteeInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitteeInfoResponseWithDefaults() *CommitteeInfoResponse {
	this := CommitteeInfoResponse{}
	return &this
}

// GetAccessNodes returns the AccessNodes field value if set, zero value otherwise.
func (o *CommitteeInfoResponse) GetAccessNodes() []CommitteeNode {
	if o == nil || isNil(o.AccessNodes) {
		var ret []CommitteeNode
		return ret
	}
	return o.AccessNodes
}

// GetAccessNodesOk returns a tuple with the AccessNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetAccessNodesOk() ([]CommitteeNode, bool) {
	if o == nil || isNil(o.AccessNodes) {
    return nil, false
	}
	return o.AccessNodes, true
}

// HasAccessNodes returns a boolean if a field has been set.
func (o *CommitteeInfoResponse) HasAccessNodes() bool {
	if o != nil && !isNil(o.AccessNodes) {
		return true
	}

	return false
}

// SetAccessNodes gets a reference to the given []CommitteeNode and assigns it to the AccessNodes field.
func (o *CommitteeInfoResponse) SetAccessNodes(v []CommitteeNode) {
	o.AccessNodes = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CommitteeInfoResponse) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
    return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CommitteeInfoResponse) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CommitteeInfoResponse) SetActive(v bool) {
	o.Active = &v
}

// GetCandidateNodes returns the CandidateNodes field value if set, zero value otherwise.
func (o *CommitteeInfoResponse) GetCandidateNodes() []CommitteeNode {
	if o == nil || isNil(o.CandidateNodes) {
		var ret []CommitteeNode
		return ret
	}
	return o.CandidateNodes
}

// GetCandidateNodesOk returns a tuple with the CandidateNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetCandidateNodesOk() ([]CommitteeNode, bool) {
	if o == nil || isNil(o.CandidateNodes) {
    return nil, false
	}
	return o.CandidateNodes, true
}

// HasCandidateNodes returns a boolean if a field has been set.
func (o *CommitteeInfoResponse) HasCandidateNodes() bool {
	if o != nil && !isNil(o.CandidateNodes) {
		return true
	}

	return false
}

// SetCandidateNodes gets a reference to the given []CommitteeNode and assigns it to the CandidateNodes field.
func (o *CommitteeInfoResponse) SetCandidateNodes(v []CommitteeNode) {
	o.CandidateNodes = v
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *CommitteeInfoResponse) GetChainId() string {
	if o == nil || isNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetChainIdOk() (*string, bool) {
	if o == nil || isNil(o.ChainId) {
    return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *CommitteeInfoResponse) HasChainId() bool {
	if o != nil && !isNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *CommitteeInfoResponse) SetChainId(v string) {
	o.ChainId = &v
}

// GetCommitteeNodes returns the CommitteeNodes field value if set, zero value otherwise.
func (o *CommitteeInfoResponse) GetCommitteeNodes() []CommitteeNode {
	if o == nil || isNil(o.CommitteeNodes) {
		var ret []CommitteeNode
		return ret
	}
	return o.CommitteeNodes
}

// GetCommitteeNodesOk returns a tuple with the CommitteeNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetCommitteeNodesOk() ([]CommitteeNode, bool) {
	if o == nil || isNil(o.CommitteeNodes) {
    return nil, false
	}
	return o.CommitteeNodes, true
}

// HasCommitteeNodes returns a boolean if a field has been set.
func (o *CommitteeInfoResponse) HasCommitteeNodes() bool {
	if o != nil && !isNil(o.CommitteeNodes) {
		return true
	}

	return false
}

// SetCommitteeNodes gets a reference to the given []CommitteeNode and assigns it to the CommitteeNodes field.
func (o *CommitteeInfoResponse) SetCommitteeNodes(v []CommitteeNode) {
	o.CommitteeNodes = v
}

// GetStateAddress returns the StateAddress field value if set, zero value otherwise.
func (o *CommitteeInfoResponse) GetStateAddress() string {
	if o == nil || isNil(o.StateAddress) {
		var ret string
		return ret
	}
	return *o.StateAddress
}

// GetStateAddressOk returns a tuple with the StateAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetStateAddressOk() (*string, bool) {
	if o == nil || isNil(o.StateAddress) {
    return nil, false
	}
	return o.StateAddress, true
}

// HasStateAddress returns a boolean if a field has been set.
func (o *CommitteeInfoResponse) HasStateAddress() bool {
	if o != nil && !isNil(o.StateAddress) {
		return true
	}

	return false
}

// SetStateAddress gets a reference to the given string and assigns it to the StateAddress field.
func (o *CommitteeInfoResponse) SetStateAddress(v string) {
	o.StateAddress = &v
}

func (o CommitteeInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccessNodes) {
		toSerialize["accessNodes"] = o.AccessNodes
	}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.CandidateNodes) {
		toSerialize["candidateNodes"] = o.CandidateNodes
	}
	if !isNil(o.ChainId) {
		toSerialize["chainId"] = o.ChainId
	}
	if !isNil(o.CommitteeNodes) {
		toSerialize["committeeNodes"] = o.CommitteeNodes
	}
	if !isNil(o.StateAddress) {
		toSerialize["stateAddress"] = o.StateAddress
	}
	return json.Marshal(toSerialize)
}

type NullableCommitteeInfoResponse struct {
	value *CommitteeInfoResponse
	isSet bool
}

func (v NullableCommitteeInfoResponse) Get() *CommitteeInfoResponse {
	return v.value
}

func (v *NullableCommitteeInfoResponse) Set(val *CommitteeInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitteeInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitteeInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitteeInfoResponse(val *CommitteeInfoResponse) *NullableCommitteeInfoResponse {
	return &NullableCommitteeInfoResponse{value: val, isSet: true}
}

func (v NullableCommitteeInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitteeInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


