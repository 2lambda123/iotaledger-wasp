/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RequestDetail struct for RequestDetail
type RequestDetail struct {
	Allowance *Allowance `json:"allowance,omitempty"`
	CallTarget *CallTarget `json:"callTarget,omitempty"`
	FungibleTokens *FungibleTokens `json:"fungibleTokens,omitempty"`
	GasGudget *int64 `json:"gasGudget,omitempty"`
	IsEVM *bool `json:"isEVM,omitempty"`
	IsOffLedger *bool `json:"isOffLedger,omitempty"`
	Nft *NFTDataResponse `json:"nft,omitempty"`
	Params *JSONDict `json:"params,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
	SenderAccount *string `json:"senderAccount,omitempty"`
	TargetAddress *string `json:"targetAddress,omitempty"`
}

// NewRequestDetail instantiates a new RequestDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestDetail() *RequestDetail {
	this := RequestDetail{}
	return &this
}

// NewRequestDetailWithDefaults instantiates a new RequestDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestDetailWithDefaults() *RequestDetail {
	this := RequestDetail{}
	return &this
}

// GetAllowance returns the Allowance field value if set, zero value otherwise.
func (o *RequestDetail) GetAllowance() Allowance {
	if o == nil || isNil(o.Allowance) {
		var ret Allowance
		return ret
	}
	return *o.Allowance
}

// GetAllowanceOk returns a tuple with the Allowance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetAllowanceOk() (*Allowance, bool) {
	if o == nil || isNil(o.Allowance) {
    return nil, false
	}
	return o.Allowance, true
}

// HasAllowance returns a boolean if a field has been set.
func (o *RequestDetail) HasAllowance() bool {
	if o != nil && !isNil(o.Allowance) {
		return true
	}

	return false
}

// SetAllowance gets a reference to the given Allowance and assigns it to the Allowance field.
func (o *RequestDetail) SetAllowance(v Allowance) {
	o.Allowance = &v
}

// GetCallTarget returns the CallTarget field value if set, zero value otherwise.
func (o *RequestDetail) GetCallTarget() CallTarget {
	if o == nil || isNil(o.CallTarget) {
		var ret CallTarget
		return ret
	}
	return *o.CallTarget
}

// GetCallTargetOk returns a tuple with the CallTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetCallTargetOk() (*CallTarget, bool) {
	if o == nil || isNil(o.CallTarget) {
    return nil, false
	}
	return o.CallTarget, true
}

// HasCallTarget returns a boolean if a field has been set.
func (o *RequestDetail) HasCallTarget() bool {
	if o != nil && !isNil(o.CallTarget) {
		return true
	}

	return false
}

// SetCallTarget gets a reference to the given CallTarget and assigns it to the CallTarget field.
func (o *RequestDetail) SetCallTarget(v CallTarget) {
	o.CallTarget = &v
}

// GetFungibleTokens returns the FungibleTokens field value if set, zero value otherwise.
func (o *RequestDetail) GetFungibleTokens() FungibleTokens {
	if o == nil || isNil(o.FungibleTokens) {
		var ret FungibleTokens
		return ret
	}
	return *o.FungibleTokens
}

// GetFungibleTokensOk returns a tuple with the FungibleTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetFungibleTokensOk() (*FungibleTokens, bool) {
	if o == nil || isNil(o.FungibleTokens) {
    return nil, false
	}
	return o.FungibleTokens, true
}

// HasFungibleTokens returns a boolean if a field has been set.
func (o *RequestDetail) HasFungibleTokens() bool {
	if o != nil && !isNil(o.FungibleTokens) {
		return true
	}

	return false
}

// SetFungibleTokens gets a reference to the given FungibleTokens and assigns it to the FungibleTokens field.
func (o *RequestDetail) SetFungibleTokens(v FungibleTokens) {
	o.FungibleTokens = &v
}

// GetGasGudget returns the GasGudget field value if set, zero value otherwise.
func (o *RequestDetail) GetGasGudget() int64 {
	if o == nil || isNil(o.GasGudget) {
		var ret int64
		return ret
	}
	return *o.GasGudget
}

// GetGasGudgetOk returns a tuple with the GasGudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetGasGudgetOk() (*int64, bool) {
	if o == nil || isNil(o.GasGudget) {
    return nil, false
	}
	return o.GasGudget, true
}

// HasGasGudget returns a boolean if a field has been set.
func (o *RequestDetail) HasGasGudget() bool {
	if o != nil && !isNil(o.GasGudget) {
		return true
	}

	return false
}

// SetGasGudget gets a reference to the given int64 and assigns it to the GasGudget field.
func (o *RequestDetail) SetGasGudget(v int64) {
	o.GasGudget = &v
}

// GetIsEVM returns the IsEVM field value if set, zero value otherwise.
func (o *RequestDetail) GetIsEVM() bool {
	if o == nil || isNil(o.IsEVM) {
		var ret bool
		return ret
	}
	return *o.IsEVM
}

// GetIsEVMOk returns a tuple with the IsEVM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetIsEVMOk() (*bool, bool) {
	if o == nil || isNil(o.IsEVM) {
    return nil, false
	}
	return o.IsEVM, true
}

// HasIsEVM returns a boolean if a field has been set.
func (o *RequestDetail) HasIsEVM() bool {
	if o != nil && !isNil(o.IsEVM) {
		return true
	}

	return false
}

// SetIsEVM gets a reference to the given bool and assigns it to the IsEVM field.
func (o *RequestDetail) SetIsEVM(v bool) {
	o.IsEVM = &v
}

// GetIsOffLedger returns the IsOffLedger field value if set, zero value otherwise.
func (o *RequestDetail) GetIsOffLedger() bool {
	if o == nil || isNil(o.IsOffLedger) {
		var ret bool
		return ret
	}
	return *o.IsOffLedger
}

// GetIsOffLedgerOk returns a tuple with the IsOffLedger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetIsOffLedgerOk() (*bool, bool) {
	if o == nil || isNil(o.IsOffLedger) {
    return nil, false
	}
	return o.IsOffLedger, true
}

// HasIsOffLedger returns a boolean if a field has been set.
func (o *RequestDetail) HasIsOffLedger() bool {
	if o != nil && !isNil(o.IsOffLedger) {
		return true
	}

	return false
}

// SetIsOffLedger gets a reference to the given bool and assigns it to the IsOffLedger field.
func (o *RequestDetail) SetIsOffLedger(v bool) {
	o.IsOffLedger = &v
}

// GetNft returns the Nft field value if set, zero value otherwise.
func (o *RequestDetail) GetNft() NFTDataResponse {
	if o == nil || isNil(o.Nft) {
		var ret NFTDataResponse
		return ret
	}
	return *o.Nft
}

// GetNftOk returns a tuple with the Nft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetNftOk() (*NFTDataResponse, bool) {
	if o == nil || isNil(o.Nft) {
    return nil, false
	}
	return o.Nft, true
}

// HasNft returns a boolean if a field has been set.
func (o *RequestDetail) HasNft() bool {
	if o != nil && !isNil(o.Nft) {
		return true
	}

	return false
}

// SetNft gets a reference to the given NFTDataResponse and assigns it to the Nft field.
func (o *RequestDetail) SetNft(v NFTDataResponse) {
	o.Nft = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *RequestDetail) GetParams() JSONDict {
	if o == nil || isNil(o.Params) {
		var ret JSONDict
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetParamsOk() (*JSONDict, bool) {
	if o == nil || isNil(o.Params) {
    return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *RequestDetail) HasParams() bool {
	if o != nil && !isNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given JSONDict and assigns it to the Params field.
func (o *RequestDetail) SetParams(v JSONDict) {
	o.Params = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *RequestDetail) GetRequestId() string {
	if o == nil || isNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetRequestIdOk() (*string, bool) {
	if o == nil || isNil(o.RequestId) {
    return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *RequestDetail) HasRequestId() bool {
	if o != nil && !isNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *RequestDetail) SetRequestId(v string) {
	o.RequestId = &v
}

// GetSenderAccount returns the SenderAccount field value if set, zero value otherwise.
func (o *RequestDetail) GetSenderAccount() string {
	if o == nil || isNil(o.SenderAccount) {
		var ret string
		return ret
	}
	return *o.SenderAccount
}

// GetSenderAccountOk returns a tuple with the SenderAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetSenderAccountOk() (*string, bool) {
	if o == nil || isNil(o.SenderAccount) {
    return nil, false
	}
	return o.SenderAccount, true
}

// HasSenderAccount returns a boolean if a field has been set.
func (o *RequestDetail) HasSenderAccount() bool {
	if o != nil && !isNil(o.SenderAccount) {
		return true
	}

	return false
}

// SetSenderAccount gets a reference to the given string and assigns it to the SenderAccount field.
func (o *RequestDetail) SetSenderAccount(v string) {
	o.SenderAccount = &v
}

// GetTargetAddress returns the TargetAddress field value if set, zero value otherwise.
func (o *RequestDetail) GetTargetAddress() string {
	if o == nil || isNil(o.TargetAddress) {
		var ret string
		return ret
	}
	return *o.TargetAddress
}

// GetTargetAddressOk returns a tuple with the TargetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestDetail) GetTargetAddressOk() (*string, bool) {
	if o == nil || isNil(o.TargetAddress) {
    return nil, false
	}
	return o.TargetAddress, true
}

// HasTargetAddress returns a boolean if a field has been set.
func (o *RequestDetail) HasTargetAddress() bool {
	if o != nil && !isNil(o.TargetAddress) {
		return true
	}

	return false
}

// SetTargetAddress gets a reference to the given string and assigns it to the TargetAddress field.
func (o *RequestDetail) SetTargetAddress(v string) {
	o.TargetAddress = &v
}

func (o RequestDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Allowance) {
		toSerialize["allowance"] = o.Allowance
	}
	if !isNil(o.CallTarget) {
		toSerialize["callTarget"] = o.CallTarget
	}
	if !isNil(o.FungibleTokens) {
		toSerialize["fungibleTokens"] = o.FungibleTokens
	}
	if !isNil(o.GasGudget) {
		toSerialize["gasGudget"] = o.GasGudget
	}
	if !isNil(o.IsEVM) {
		toSerialize["isEVM"] = o.IsEVM
	}
	if !isNil(o.IsOffLedger) {
		toSerialize["isOffLedger"] = o.IsOffLedger
	}
	if !isNil(o.Nft) {
		toSerialize["nft"] = o.Nft
	}
	if !isNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !isNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !isNil(o.SenderAccount) {
		toSerialize["senderAccount"] = o.SenderAccount
	}
	if !isNil(o.TargetAddress) {
		toSerialize["targetAddress"] = o.TargetAddress
	}
	return json.Marshal(toSerialize)
}

type NullableRequestDetail struct {
	value *RequestDetail
	isSet bool
}

func (v NullableRequestDetail) Get() *RequestDetail {
	return v.value
}

func (v *NullableRequestDetail) Set(val *RequestDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestDetail(val *RequestDetail) *NullableRequestDetail {
	return &NullableRequestDetail{value: val, isSet: true}
}

func (v NullableRequestDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


