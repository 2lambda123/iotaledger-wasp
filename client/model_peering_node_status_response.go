/*
Wasp API

REST API for the Wasp node

API version: 0.4.0-alpha.2-402-g2adcf666b
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PeeringNodeStatusResponse struct for PeeringNodeStatusResponse
type PeeringNodeStatusResponse struct {
	// Whether or not the peer is activated
	IsAlive *bool `json:"isAlive,omitempty"`
	IsTrusted *bool `json:"isTrusted,omitempty"`
	// The NetID of the peer
	NetId *string `json:"netId,omitempty"`
	// The amount of users attached to the peer
	NumUsers *int32 `json:"numUsers,omitempty"`
	// The peers public key encoded in Hex
	PublicKey *string `json:"publicKey,omitempty"`
}

// NewPeeringNodeStatusResponse instantiates a new PeeringNodeStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeeringNodeStatusResponse() *PeeringNodeStatusResponse {
	this := PeeringNodeStatusResponse{}
	return &this
}

// NewPeeringNodeStatusResponseWithDefaults instantiates a new PeeringNodeStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeeringNodeStatusResponseWithDefaults() *PeeringNodeStatusResponse {
	this := PeeringNodeStatusResponse{}
	return &this
}

// GetIsAlive returns the IsAlive field value if set, zero value otherwise.
func (o *PeeringNodeStatusResponse) GetIsAlive() bool {
	if o == nil || isNil(o.IsAlive) {
		var ret bool
		return ret
	}
	return *o.IsAlive
}

// GetIsAliveOk returns a tuple with the IsAlive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetIsAliveOk() (*bool, bool) {
	if o == nil || isNil(o.IsAlive) {
    return nil, false
	}
	return o.IsAlive, true
}

// HasIsAlive returns a boolean if a field has been set.
func (o *PeeringNodeStatusResponse) HasIsAlive() bool {
	if o != nil && !isNil(o.IsAlive) {
		return true
	}

	return false
}

// SetIsAlive gets a reference to the given bool and assigns it to the IsAlive field.
func (o *PeeringNodeStatusResponse) SetIsAlive(v bool) {
	o.IsAlive = &v
}

// GetIsTrusted returns the IsTrusted field value if set, zero value otherwise.
func (o *PeeringNodeStatusResponse) GetIsTrusted() bool {
	if o == nil || isNil(o.IsTrusted) {
		var ret bool
		return ret
	}
	return *o.IsTrusted
}

// GetIsTrustedOk returns a tuple with the IsTrusted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetIsTrustedOk() (*bool, bool) {
	if o == nil || isNil(o.IsTrusted) {
    return nil, false
	}
	return o.IsTrusted, true
}

// HasIsTrusted returns a boolean if a field has been set.
func (o *PeeringNodeStatusResponse) HasIsTrusted() bool {
	if o != nil && !isNil(o.IsTrusted) {
		return true
	}

	return false
}

// SetIsTrusted gets a reference to the given bool and assigns it to the IsTrusted field.
func (o *PeeringNodeStatusResponse) SetIsTrusted(v bool) {
	o.IsTrusted = &v
}

// GetNetId returns the NetId field value if set, zero value otherwise.
func (o *PeeringNodeStatusResponse) GetNetId() string {
	if o == nil || isNil(o.NetId) {
		var ret string
		return ret
	}
	return *o.NetId
}

// GetNetIdOk returns a tuple with the NetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetNetIdOk() (*string, bool) {
	if o == nil || isNil(o.NetId) {
    return nil, false
	}
	return o.NetId, true
}

// HasNetId returns a boolean if a field has been set.
func (o *PeeringNodeStatusResponse) HasNetId() bool {
	if o != nil && !isNil(o.NetId) {
		return true
	}

	return false
}

// SetNetId gets a reference to the given string and assigns it to the NetId field.
func (o *PeeringNodeStatusResponse) SetNetId(v string) {
	o.NetId = &v
}

// GetNumUsers returns the NumUsers field value if set, zero value otherwise.
func (o *PeeringNodeStatusResponse) GetNumUsers() int32 {
	if o == nil || isNil(o.NumUsers) {
		var ret int32
		return ret
	}
	return *o.NumUsers
}

// GetNumUsersOk returns a tuple with the NumUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetNumUsersOk() (*int32, bool) {
	if o == nil || isNil(o.NumUsers) {
    return nil, false
	}
	return o.NumUsers, true
}

// HasNumUsers returns a boolean if a field has been set.
func (o *PeeringNodeStatusResponse) HasNumUsers() bool {
	if o != nil && !isNil(o.NumUsers) {
		return true
	}

	return false
}

// SetNumUsers gets a reference to the given int32 and assigns it to the NumUsers field.
func (o *PeeringNodeStatusResponse) SetNumUsers(v int32) {
	o.NumUsers = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *PeeringNodeStatusResponse) GetPublicKey() string {
	if o == nil || isNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeeringNodeStatusResponse) GetPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.PublicKey) {
    return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *PeeringNodeStatusResponse) HasPublicKey() bool {
	if o != nil && !isNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *PeeringNodeStatusResponse) SetPublicKey(v string) {
	o.PublicKey = &v
}

func (o PeeringNodeStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsAlive) {
		toSerialize["isAlive"] = o.IsAlive
	}
	if !isNil(o.IsTrusted) {
		toSerialize["isTrusted"] = o.IsTrusted
	}
	if !isNil(o.NetId) {
		toSerialize["netId"] = o.NetId
	}
	if !isNil(o.NumUsers) {
		toSerialize["numUsers"] = o.NumUsers
	}
	if !isNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	return json.Marshal(toSerialize)
}

type NullablePeeringNodeStatusResponse struct {
	value *PeeringNodeStatusResponse
	isSet bool
}

func (v NullablePeeringNodeStatusResponse) Get() *PeeringNodeStatusResponse {
	return v.value
}

func (v *NullablePeeringNodeStatusResponse) Set(val *PeeringNodeStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePeeringNodeStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePeeringNodeStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeeringNodeStatusResponse(val *PeeringNodeStatusResponse) *NullablePeeringNodeStatusResponse {
	return &NullablePeeringNodeStatusResponse{value: val, isSet: true}
}

func (v NullablePeeringNodeStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeeringNodeStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


